from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from utils import check_subscription, generate_with_together, generate_hashtags, generate_pdf, PROMPTS, subscriptions  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

THEME, STYLE, TEMPLATE, IDEAS, EDIT = range(5)
GOAL, AUDIENCE, PERIOD = range(3)

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [["–ü–æ—Å—Ç", "–†–∏–ª—Å"], ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–•–µ—à—Ç–µ–≥–∏"], ["–ê/–ë —Ç–µ—Å—Ç"]],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    check_subscription(user_id)

    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø SMM-–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. üéâ\n"
        "–£ —Ç–µ–±—è 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ü–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏! –ü–æ–ø—Ä–æ–±—É–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç, –∏–¥–µ–∏ –¥–ª—è Reels –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω."
    )

    await update.message.reply_text(welcome_message, reply_markup=MAIN_KEYBOARD)

async def podpiska(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not check_subscription(user_id):
        message = (
            "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:\n"
            "1. –õ–∞–π—Ç ‚Äî 300 —Ä—É–±./–º–µ—Å (–∏–ª–∏ 1620 —Ä—É–±. –∑–∞ 6 –º–µ—Å, 2880 —Ä—É–±. –∑–∞ –≥–æ–¥)\n"
            "2. –ü–æ–ª–Ω–∞—è ‚Äî 600 —Ä—É–±./–º–µ—Å (–∏–ª–∏ 3240 —Ä—É–±. –∑–∞ 6 –º–µ—Å, 5760 —Ä—É–±. –∑–∞ –≥–æ–¥)\n"
            "3. –†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ ‚Äî 10 000 —Ä—É–±. (–Ω–∞–≤—Å–µ–≥–¥–∞)\n\n"
            "–ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞–ø–∏—à–∏ @i_chechuev –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é."
        )
        await update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())
    else:
        expiry_date = subscriptions[user_id].strftime("%Y-%m-%d") if subscriptions[user_id] else "–Ω–∞–≤—Å–µ–≥–¥–∞"
        await update.message.reply_text(
            f"–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞: {subscriptions[user_id]} (–¥–æ {expiry_date}).\n"
            "–•–æ—á–µ—à—å –ø—Ä–æ–¥–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? –ù–∞–ø–∏—à–∏ /podpiska.",
            reply_markup=ReplyKeyboardRemove()
        )

async def strategiya(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not check_subscription(user_id):
        await update.message.reply_text(
            "–¢–≤–æ–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫! –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É: /podpiska",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    if subscriptions[user_id] not in ["full", "lifetime"]:
        await update.message.reply_text(
            "–§—É–Ω–∫—Ü–∏—è '–°—Ç—Ä–∞—Ç–µ–≥–∏—è' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ü–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É: /podpiska",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? –ù–∞–ø—Ä–∏–º–µ—Ä: –£–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å, –ü—Ä–∏–≤–ª–µ—á—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç.",
        reply_markup=ReplyKeyboardRemove()
    )
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['goal'] = update.message.text
    await update.message.reply_text(
        "–ö—Ç–æ —Ç–≤–æ—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è? –ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–ª–æ–¥—ë–∂—å 18-25 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è –º–æ–¥–æ–π, –∞–∫—Ç–∏–≤–Ω—ã –≤ Instagram."
    )
    return AUDIENCE

async def audience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['audience'] = update.message.text
    await update.message.reply_text(
        "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –Ω—É–∂–µ–Ω –ø–ª–∞–Ω? –ù–∞–ø—Ä–∏–º–µ—Ä: 1 –Ω–µ–¥–µ–ª—è, 1 –º–µ—Å—è—Ü."
    )
    return PERIOD

async def period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['period'] = update.message.text
    goal = context.user_data['goal']
    audience = context.user_data['audience']
    period = context.user_data['period']

    goal_lower = goal.lower()
    if "–≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å" in goal_lower:
        strategy_type = "engagement"
    elif "–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤" in goal_lower:
        strategy_type = "followers"
    elif "–ø—Ä–æ–¥–∞—Ç—å" in goal_lower or "–ø—Ä–æ–¥–∞–∂" in goal_lower:
        strategy_type = "sales"
    else:
        strategy_type = "engagement"

    strategy_prompt = PROMPTS.get("strategy", {}).get(strategy_type, "–°–æ—Å—Ç–∞–≤—å SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience}, –ø–µ—Ä–∏–æ–¥: {period}.")
    strategy_prompt = strategy_prompt.format(audience=audience, channels="Instagram, Telegram", result="—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏")

    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    strategy_text = generate_with_together(strategy_prompt)
    hashtags = generate_hashtags("–º–æ–¥–∞")
    pdf_buffer = generate_pdf(strategy_text)

    await update.message.reply_document(
        document=pdf_buffer,
        filename=f"SMM_Strategy_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
        caption=f"–í–æ—Ç —Ç–≤–æ—è SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω! üìÑ\n\n{hashtags}"
    )

    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=MAIN_KEYBOARD)
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not check_subscription(user_id):
        await update.message.reply_text(
            "–¢–≤–æ–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫! –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É: /podpiska",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    text = update.message.text
    subscription_type = subscriptions.get(user_id, "lite")

    if text == "–ü–æ—Å—Ç":
        if subscription_type in ["lite", "full", "lifetime"]:
            await update.message.reply_text("–û —á—ë–º –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç? (—É–∫–∞–∂–∏ —Ç–µ–º—É)", reply_markup=ReplyKeyboardRemove())
            context.user_data['action'] = "generate_post"
            return THEME
        else:
            await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π. –û—Ñ–æ—Ä–º–∏: /podpiska", reply_markup=ReplyKeyboardRemove())
    elif text == "–†–∏–ª—Å":
        if subscription_type in ["lite", "full", "lifetime"]:
            await update.message.reply_text("–û —á—ë–º —Å–Ω—è—Ç—å Reels? (—É–∫–∞–∂–∏ —Ç–µ–º—É)", reply_markup=ReplyKeyboardRemove())
            context.user_data['action'] = "generate_reels"
            return THEME
        else:
            await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π. –û—Ñ–æ—Ä–º–∏: /podpiska", reply_markup=ReplyKeyboardRemove())
    elif text == "–°—Ç—Ä–∞—Ç–µ–≥–∏—è":
        await strategiya(update, context)
    elif text == "–•–µ—à—Ç–µ–≥–∏":
        if subscription_type in ["lite", "full", "lifetime"]:
            await update.message.reply_text("–î–ª—è –∫–∞–∫–æ–π —Ç–µ–º—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à—Ç–µ–≥–∏?", reply_markup=ReplyKeyboardRemove())
            context.user_data['action'] = "generate_hashtags"
            return THEME
        else:
            await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π. –û—Ñ–æ—Ä–º–∏: /podpiska", reply_markup=ReplyKeyboardRemove())
    elif text == "–ê/–ë —Ç–µ—Å—Ç":
        await update.message.reply_text(
            "–§—É–Ω–∫—Ü–∏—è –ê/–ë —Ç–µ—Å—Ç–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–ª—é! üòä",
            reply_markup=ReplyKeyboardRemove()
        )
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=MAIN_KEYBOARD)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=MAIN_KEYBOARD)

async def theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data['theme'] = update.message.text

    action = context.user_data.get('action', 'generate_post')

    if action == "generate_post":
        if subscriptions[user_id] == "full":
            await update.message.reply_text("–ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞? –§–æ—Ä–º–∞–ª—å–Ω—ã–π, –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π")
            return STYLE
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω: –°—Ç–∞–Ω–¥–∞—Ä—Ç, –û–±—ä—è–≤–ª–µ–Ω–∏–µ, –û–ø—Ä–æ—Å, –ö–µ–π—Å")
            return TEMPLATE
    elif action == "generate_reels":
        theme = context.user_data['theme']
        style = "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π"
        ideas = [
            f"–ò–¥–µ—è 1: –ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ —Å —Å–æ–≤–µ—Ç–æ–º –ø–æ —Ç–µ–º–µ {theme}",
            f"–ò–¥–µ—è 2: –¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å—ä—ë–º–∫–∞ –Ω–∞ —Ç–µ–º—É {theme}",
            f"–ò–¥–µ—è 3: –í–æ–ø—Ä–æ—Å –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ {theme}"
        ]
        context.user_data['ideas'] = ideas
        await update.message.reply_text("–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –¥–ª—è Reels:\n" + "\n".join(ideas) + "\n\n–í—ã–±–µ—Ä–∏ –∏–¥–µ—é (1, 2, 3)")
        return IDEAS
    elif action == "generate_hashtags":
        theme = context.user_data['theme']
        hashtags = generate_hashtags(theme)
        await update.message.reply_text(f"–í–æ—Ç —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è —Ç–µ–º—ã '{theme}':\n{hashtags}")
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=MAIN_KEYBOARD)
        return ConversationHandler.END

async def style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['style'] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω: –°—Ç–∞–Ω–¥–∞—Ä—Ç, –û–±—ä—è–≤–ª–µ–Ω–∏–µ, –û–ø—Ä–æ—Å, –ö–µ–π—Å")
    return TEMPLATE

async def template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['template'] = update.message.text
    theme = context.user_data['theme']
    style = context.user_data.get('style', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π').lower()
    template = context.user_data['template']

    ideas = [
        f"–ò–¥–µ—è 1: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑—É {theme} –≤ —Å—Ç–∏–ª–µ {style}",
        f"–ò–¥–µ—è 2: –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ {theme} –≤ —Å—Ç–∏–ª–µ {style}",
        f"–ò–¥–µ—è 3: –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –ø—Ä–æ {theme} –≤ —Å—Ç–∏–ª–µ {style}"
    ]
    context.user_data['ideas'] = ideas
    await update.message.reply_text("–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π:\n" + "\n".join(ideas) + "\n\n–í—ã–±–µ—Ä–∏ –∏–¥–µ—é (1, 2, 3)")
    return IDEAS

async def ideas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idea_number = update.message.text
    theme = context.user_data['theme']
    style = context.user_data.get('style', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π').lower()
    ideas = context.user_data['ideas']

    if idea_number in ["1", "2", "3"]:
        idea = ideas[int(idea_number) - 1].split(": ")[1]
    else:
        idea = "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑—É —Ç–µ–º—ã"

    action = context.user_data.get('action', 'generate_post')
    if action == "generate_post":
        template = context.user_data['template']
        post_prompt = PROMPTS.get("post", {}).get(style, "–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É {theme} –≤ —Ñ–æ—Ä–º–∞—Ç–µ {template}.")
        post_prompt = post_prompt.format(
            theme=theme,
            template=template,
            idea=idea,
            goal="–ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ",
            main_idea="–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑—É —Ç–µ–º—ã",
            facts="–æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö",
            pains="–Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        )
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        result = generate_with_together(post_prompt)
        hashtags = generate_hashtags(theme)
        context.user_data['last_result'] = result
        await update.message.reply_text(f"–ì–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç:\n{result}\n\n{hashtags}\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø–∏—à–∏ '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'")
        return EDIT
    elif action == "generate_reels":
        reels_prompt = f"–°–æ–∑–¥–∞–π –∏–¥–µ—é –¥–ª—è Reels –Ω–∞ —Ç–µ–º—É {theme}. –û–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–≤–ª–µ—á—ë—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –ò–¥–µ—è: {idea}."
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Reels –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        result = generate_with_together(reels_prompt)
        hashtags = generate_hashtags(theme)
        context.user_data['last_result'] = result
        await update.message.reply_text(f"–ì–æ—Ç–æ–≤–∞—è –∏–¥–µ—è –¥–ª—è Reels:\n{result}\n\n{hashtags}\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø–∏—à–∏ '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'")
        return EDIT

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text.lower() == "–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await update.message.reply_text("–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É–±–µ—Ä–∏ —Å–ª–æ–≤–æ –∫–æ—Ñ–µ')")
        return EDIT
    elif text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=MAIN_KEYBOARD)
        return ConversationHandler.END
    else:
        edit_request = text
        last_result = context.user_data['last_result']
        style = context.user_data.get('style', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π').lower()
        action = context.user_data.get('action', 'generate_post')

        edit_prompt = (
            f"–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: '{last_result}' —Å —É—á—ë—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{edit_request}'. "
            f"–°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å: {style}. –ü–∏—à–∏ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –±–µ–∑ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤. "
            f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."
        )

        logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {'–ø–æ—Å—Ç–∞' if action == 'generate_post' else 'Reels'} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        edited_result = generate_with_together(edit_prompt)
        context.user_data['last_result'] = edited_result

        await update.message.reply_text(
            f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π {'–ø–æ—Å—Ç' if action == 'generate_post' else 'Reels'}:\n{edited_result}\n\n"
            f"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â—ë —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏ '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', –∏–ª–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return EDIT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=MAIN_KEYBOARD)
    return ConversationHandler.END