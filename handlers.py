import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from together import Together
import os
from datetime import datetime, timedelta
from fpdf import FPDF
import re

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

together_client = Together(api_key=os.getenv("TOGETHER_API_KEY"))
subscriptions = {}

def check_subscription(user_id: int) -> dict:
    if user_id not in subscriptions:
        start_date = datetime.now()
        end_date = start_date + timedelta(days=3)
        subscriptions[user_id] = {
            "start_date": start_date,
            "end_date": end_date,
            "status": "trial"
        }
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {subscriptions[user_id]}")
    return subscriptions[user_id]

def generate_post(theme: str, style: str) -> list[str]:
    max_attempts = 3
    for attempt in range(max_attempts):
        prompt = (
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–≤–Ω–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É '{theme}' –≤ {style} —Å—Ç–∏–ª–µ. "
            f"–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥–æ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –†–∞–∑–¥–µ–ª—è–π —á–µ—Ä–µ–∑ 2 –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏."
        )
        try:
            response = together_client.completions.create(  # –£–ë–†–ê–ù await!
                model="meta-llama/Llama-3-8b-chat-hf",
                prompt=prompt,
                max_tokens=200,
                temperature=0.7,
                top_p=0.9,
            )
            variants = response.choices[0].text.strip().split("\n\n")
            variants = [v.strip() for v in variants if v.strip()]
            if len(variants) >= 3:
                return variants[:3]
            else:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                if attempt == max_attempts - 1:
                    variants += ["–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üòä"] * (3 - len(variants))
                    return variants
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            if attempt == max_attempts - 1:
                return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"] * 3
    return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"] * 3

def generate_strategy(goal: str, audience: str, period: str) -> str:
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ü–µ–ª–∏ '{goal}' –¥–ª—è '{audience}' –∑–∞ {period}. "
        f"5-7 –ø—É–Ω–∫—Ç–æ–≤ —Å –º–∞—Ä–∫–µ—Ä–æ–º '*', —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. "
        f"–ò—Å–ø–æ–ª—å–∑—É–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–í–ö, –Æ—Ç—É–±, –¢–∏–∫–¢–æ–∫, –ò–Ω—Å—Ç–∞–≥—Ä–∞–º)."
    )
    try:
        response = together_client.completions.create(  # –£–ë–†–ê–ù await!
            model="meta-llama/Llama-3-8b-chat-hf",
            prompt=prompt,
            max_tokens=400,
            temperature=0.6,
        )
        strategy = response.choices[0].text.strip()
        lines = strategy.split("\n")
        filtered = []
        for line in lines:
            if not any(word in line.lower() for word in ["live", "instagram", "facebook"]):
                filtered.append(line)
        return "\n".join(filtered)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"

def create_pdf(content: str, filename: str):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", "", 12)
    pdf.multi_cell(0, 10, content)  # –£–ë–†–ê–ù–ê –∫–æ–¥–∏—Ä–æ–≤–∫–∞ latin-1
    pdf.output(filename)
    logger.info(f"PDF —Å–æ–∑–¥–∞–Ω: {filename}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    check_subscription(user_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip().lower()
    subscription = check_subscription(user_id)
    
    if "user_name" not in context.user_data:
        context.user_data["user_name"] = update.message.text
        await update.message.reply_text(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {context.user_data['user_name']}! üéâ –í—ã–±–µ—Ä–∏—Ç–µ: –ø–æ—Å—Ç –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"
        )
        return
    
    if context.user_data.get("state") == "post_style":
        style = text
        theme = context.user_data["post_theme"]
        try:
            variants = generate_post(theme, style)  # –£–ë–†–ê–ù await!
            await update.message.reply_text(f"–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n" + "\n\n".join(variants))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ")
        finally:
            context.user_data.pop("state", None)
    
    elif context.user_data.get("state") == "strategy_period":
        period = text
        goal = context.user_data["strategy_goal"]
        audience = context.user_data["strategy_audience"]
        try:
            strategy = generate_strategy(goal, audience, period)  # –£–ë–†–ê–ù await!
            filename = f"strategy_{user_id}.pdf"
            create_pdf(strategy, filename)
            with open(filename, "rb") as f:
                await update.message.reply_document(f)
            os.remove(filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        finally:
            context.user_data.pop("state", None)
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–ª–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # ...