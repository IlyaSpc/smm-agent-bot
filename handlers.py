import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from together import Together
import os
from datetime import datetime, timedelta
from fpdf import FPDF
import re
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Together API
together_client = Together(api_key=os.getenv("TOGETHER_API_KEY"))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ JSON
with open("prompts.json", "r", encoding="utf-8") as f:
    PROMPTS = json.load(f)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
subscriptions = {}

def check_subscription(user_id: int) -> dict:
    if user_id not in subscriptions:
        start_date = datetime.now()
        end_date = start_date + timedelta(days=3)
        subscriptions[user_id] = {
            "start_date": start_date,
            "end_date": end_date,
            "status": "trial"
        }
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {subscriptions[user_id]}")
    return subscriptions[user_id]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
async def generate_post(theme: str, style: str) -> list[str]:
    max_attempts = 3
    for attempt in range(max_attempts):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç –∏–∑ JSON
        prompt_template = PROMPTS["post"].get(style, PROMPTS["post"]["friendly"])
        prompt = prompt_template.format(
            theme=theme,
            idea="",
            goal="–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
            main_idea="",
            facts="",
            pains="",
            template="—Å—Ç–∞–Ω–¥–∞—Ä—Ç"
        )
        
        try:
            response = together_client.completions.create(
                model="meta-llama/Llama-3-8b-chat-hf",
                prompt=prompt,
                max_tokens=200,
                temperature=0.7,
                top_p=0.9,
            )
            variants = response.choices[0].text.strip().split("\n\n")
            variants = [v.strip() for v in variants if v.strip()]
            
            if len(variants) >= 3:
                return variants[:3]
            else:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 3")
                if attempt == max_attempts - 1:
                    while len(variants) < 3:
                        variants.append("–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
                    return variants
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            if attempt == max_attempts - 1:
                return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."] * 3
    return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."] * 3

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async def generate_strategy(goal: str, audience: str, period: str) -> str:
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, engagement)
    strategy_type = "engagement"
    prompt_template = PROMPTS["strategy"].get(strategy_type, PROMPTS["strategy"]["engagement"])
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    prompt = prompt_template.format(
        audience=audience,
        channels="Instagram, –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, Telegram",
        result=f"—É–≤–µ–ª–∏—á–µ–Ω–∏–µ {goal} –∑–∞ {period}"
    )
    
    try:
        response = together_client.completions.create(
            model="meta-llama/Llama-3-8b-chat-hf",
            prompt=prompt,
            max_tokens=600,
            temperature=0.7,
            top_p=0.9,
        )
        strategy = response.choices[0].text.strip()
        lines = strategy.split("\n")
        filtered_lines = []
        for line in lines:
            if not any(word in line.lower() for word in ["live", "instagram", "facebook"]):
                filtered_lines.append(line)
        return "\n".join(filtered_lines)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"

# –°–æ–∑–¥–∞–Ω–∏–µ PDF
def create_pdf(content: str, filename: str):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", "", 12)
    pdf.multi_cell(0, 10, content)
    pdf.output(filename)
    logger.info(f"PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    check_subscription(user_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π SMM-–ø–æ–º–æ—â–Ω–∏–∫! üòä –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower().strip()
    subscription = check_subscription(user_id)
    
    if "user_name" not in context.user_data:
        context.user_data["user_name"] = update.message.text
        await update.message.reply_text(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {context.user_data['user_name']}! üéâ –£ —Ç–µ–±—è 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞! –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å: –ø–æ—Å—Ç –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é?"
        )
        return
    
    if "–ø–æ—Å—Ç" in text:
        context.user_data["state"] = "post_theme"
        await update.message.reply_text("–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø–æ—Å—Ç! üåü –£–∫–∞–∂–∏ —Ç–µ–º—É:")
    elif "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è" in text:
        context.user_data["state"] = "strategy_goal"
        await update.message.reply_text("–î–∞–≤–∞–π —Å–æ—Å—Ç–∞–≤–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é! üìà –£–∫–∞–∂–∏ —Ü–µ–ª—å:")
    elif context.user_data.get("state") == "post_theme":
        context.user_data["post_theme"] = text
        context.user_data["state"] = "post_style"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:",
            reply_markup=ReplyKeyboardMarkup([
                ["–§–æ—Ä–º–∞–ª—å–Ω—ã–π", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π"]
            ], one_time_keyboard=True)
        )
    elif context.user_data.get("state") == "post_style":
        style = text
        theme = context.user_data["post_theme"]
        try:
            variants = await generate_post(theme, style)
            response = "\n\n".join([f"{i+1}. {v}" for i, v in enumerate(variants)])
            await update.message.reply_text(f"–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n{response}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ")
        finally:
            context.user_data.pop("state", None)
            context.user_data.pop("post_theme", None)
    elif context.user_data.get("state") == "strategy_goal":
        context.user_data["strategy_goal"] = text
        context.user_data["state"] = "strategy_audience"
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:")
    elif context.user_data.get("state") == "strategy_audience":
        context.user_data["strategy_audience"] = text
        context.user_data["state"] = "strategy_period"
        await update.message.reply_text("–£–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1 –º–µ—Å—è—Ü'):")
    elif context.user_data.get("state") == "strategy_period":
        period = text
        try:
            strategy = await generate_strategy(
                context.user_data["strategy_goal"],
                context.user_data["strategy_audience"],
                period
            )
            filename = f"strategy_{user_id}.pdf"
            create_pdf(strategy, filename)
            with open(filename, "rb") as f:
                await update.message.reply_document(f)
            os.remove(filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        finally:
            context.user_data.pop("state", None)
            context.user_data.pop("strategy_goal", None)
            context.user_data.pop("strategy_audience", None)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    app = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_error_handler(error_handler)
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 80)),
        url_path="",
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/"
    )

if __name__ == "__main__":
    main()