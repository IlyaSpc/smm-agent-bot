import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from together import Together
import os
from datetime import datetime, timedelta
from fpdf import FPDF
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Together API
together_client = Together(api_key=os.getenv("TOGETHER_API_KEY"))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
subscriptions = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription(user_id: int) -> dict:
    if user_id not in subscriptions:
        start_date = datetime.now()
        end_date = start_date + timedelta(days=3)
        subscriptions[user_id] = {
            "start_date": start_date,
            "end_date": end_date,
            "status": "trial"
        }
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {subscriptions[user_id]}")
    return subscriptions[user_id]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ (–ë–ï–ó await)
def generate_post(theme: str, style: str) -> list[str]:
    max_attempts = 3
    for attempt in range(max_attempts):
        prompt = (
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–≤–Ω–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –Ω–∞ —Ç–µ–º—É '{theme}' –≤ {style} —Å—Ç–∏–ª–µ. "
            f"–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. "
            f"–†–∞–∑–¥–µ–ª—è–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–≤—É–º—è –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫–∏ (\\n\\n). –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏."
        )
        try:
            # –£–ë–†–ê–ù await (together_client –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
            response = together_client.completions.create(
                model="meta-llama/Llama-3-8b-chat-hf",
                prompt=prompt,
                max_tokens=150,
                temperature=0.7,
                top_p=0.9,
            )
            variants = response.choices[0].text.strip().split("\n\n")
            variants = [v.strip() for v in variants if v.strip() and not any(word in v.lower() for word in ["empty", "lines"])]
            
            if len(variants) >= 3:
                return variants[:3]
            else:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 3")
                if attempt == max_attempts - 1:
                    variants += ["–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üòä"] * (3 - len(variants))
                    return variants
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            if attempt == max_attempts - 1:
                return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"] * 3
    return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"] * 3

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ë–ï–ó await)
def generate_strategy(goal: str, audience: str, period: str) -> str:
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ '{goal}' –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ '{audience}' –Ω–∞ –ø–µ—Ä–∏–æ–¥ '{period}'. "
        f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤–∫–ª—é—á–∞—Ç—å 5-7 –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '* '. "
        f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ (Instagram ‚Üí –ò–Ω—Å—Ç–∞–≥—Ä–∞–º, Live ‚Üí –ø—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã)"
    )
    try:
        # –£–ë–†–ê–ù await
        response = together_client.completions.create(
            model="meta-llama/Llama-3-8b-chat-hf",
            prompt=prompt,
            max_tokens=300,
            temperature=0.7,
            top_p=0.9,
        )
        strategy = response.choices[0].text.strip()
        lines = strategy.split("\n")
        filtered = []
        for line in lines:
            if not any(word in line.lower() for word in ["live", "session", "instagram", "facebook"]):
                filtered.append(line)
        return "\n".join(filtered)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üòì"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF
def create_pdf(content: str, filename: str):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", "", 12)
    pdf.multi_cell(0, 10, content)
    pdf.output(filename)
    logger.info(f"PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user_id}")
    check_subscription(user_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π SMM-–ø–æ–º–æ—â–Ω–∏–∫! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip().lower()
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
    
    subscription = check_subscription(user_id)
    if subscription["end_date"] < datetime.now() and subscription["status"] == "trial":
        await update.message.reply_text("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!")
        return
    
    if "user_name" not in context.user_data:
        context.user_data["user_name"] = update.message.text
        await update.message.reply_text(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {context.user_data['user_name']}! üéâ –£ —Ç–µ–±—è 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞! "
            f"–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å: –ø–æ—Å—Ç –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é?"
        )
        return
    
    if "–ø–æ—Å—Ç" in text:
        context.user_data["state"] = "post_theme"
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–º—É –ø–æ—Å—Ç–∞:")
    elif "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è" in text:
        context.user_data["state"] = "strategy_goal"
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ü–µ–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
    elif context.user_data.get("state") == "post_theme":
        context.user_data["post_theme"] = text
        context.user_data["state"] = "post_style"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π/–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π/–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π")
    elif context.user_data.get("state") == "post_style":
        style = text
        theme = context.user_data["post_theme"]
        try:
            variants = generate_post(theme, style)
            response = "\n\n".join([f"{i+1}. {v}" for i, v in enumerate(variants)])
            await update.message.reply_text(f"–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n{response}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        finally:
            context.user_data["state"] = None
    elif context.user_data.get("state") == "strategy_goal":
        context.user_data["strategy_goal"] = text
        context.user_data["state"] = "strategy_audience"
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:")
    elif context.user_data.get("state") == "strategy_audience":
        context.user_data["strategy_audience"] = text
        context.user_data["state"] = "strategy_period"
        await update.message.reply_text("–£–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1 –º–µ—Å—è—Ü'):")
    elif context.user_data.get("state") == "strategy_period":
        period = text
        goal = context.user_data["strategy_goal"]
        audience = context.user_data["strategy_audience"]
        try:
            strategy = generate_strategy(goal, audience, period)
            filename = f"strategy_{user_id}.pdf"
            create_pdf(strategy, filename)
            with open(filename, "rb") as f:
                await update.message.reply_document(document=f, filename=filename)
            os.remove(filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            context.user_data["state"] = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
def main():
    application = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_error_handler(error_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 80)),
        url_path="",
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/"
    )

if __name__ == "__main__":
    main()