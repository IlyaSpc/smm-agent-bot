import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from together import Together
import os
from datetime import datetime, timedelta
from fpdf import FPDF
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Together API
together_client = Together(api_key=os.getenv("TOGETHER_API_KEY"))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
subscriptions = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription(user_id: int) -> dict:
    if user_id not in subscriptions:
        # –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 3 –¥–Ω—è —Ç—Ä–∏–∞–ª–∞
        start_date = datetime.now()
        end_date = start_date + timedelta(days=3)
        subscriptions[user_id] = {
            "start_date": start_date,
            "end_date": end_date,
            "status": "trial"
        }
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {subscriptions[user_id]}")
    return subscriptions[user_id]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
async def generate_post(theme: str, style: str) -> list[str]:
    max_attempts = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    for attempt in range(max_attempts):
        # –£—Ç–æ—á–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–æ–≤–Ω–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        prompt = (
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–≤–Ω–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –Ω–∞ —Ç–µ–º—É '{theme}' –≤ {style} —Å—Ç–∏–ª–µ. "
            f"–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. "
            f"–†–∞–∑–¥–µ–ª—è–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–≤—É–º—è –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫–∏ (\n\n). "
            f"–ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é."
        )
        try:
            response = await together_client.completions.create(
                model="meta-llama/Llama-3-8b-chat-hf",
                prompt=prompt,
                max_tokens=150,
                temperature=0.7,
                top_p=0.9,
            )
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            variants = response.choices[0].text.strip().split("\n\n")
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            variants = [v.strip() for v in variants if v.strip() and not any(word in v.lower() for word in ["empty", "lines"])]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            if len(variants) == 3:
                logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —Ç–µ–º—ã '{theme}' –≤ —Å—Ç–∏–ª–µ '{style}'")
                return variants
            elif len(variants) > 3:
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 3, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 3: {variants}")
                return variants[:3]
            else:
                # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 3, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 3: {variants}")
                if attempt == max_attempts - 1:
                    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –¥–æ–ø–æ–ª–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫–∞–º–∏
                    while len(variants) < 3:
                        variants.append("–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üòä")
                    return variants
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            if attempt == max_attempts - 1:
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
                return ["–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üòä"] * 3
    return ["–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üòä"] * 3  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async def generate_strategy(goal: str, audience: str, period: str) -> str:
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ '{goal}' –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ '{audience}' –Ω–∞ –ø–µ—Ä–∏–æ–¥ '{period}'. "
        f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤–∫–ª—é—á–∞—Ç—å 5-7 –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '* '. "
        f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ 'live', 'session', 'Instagram', 'Facebook' ‚Äî "
        f"–≤–º–µ—Å—Ç–æ –Ω–∏—Ö –ø–∏—à–∏ '–ø—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã', '—Å–µ—Å—Å–∏–∏', '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º', '–§–µ–π—Å–±—É–∫'."
    )
    try:
        response = await together_client.completions.create(
            model="meta-llama/Llama-3-8b-chat-hf",
            prompt=prompt,
            max_tokens=300,
            temperature=0.7,
            top_p=0.9,
        )
        strategy = response.choices[0].text.strip()
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        lines = strategy.split("\n")
        filtered_lines = []
        for line in lines:
            if any(word in line.lower() for word in ["live", "session", "instagram", "facebook"]):
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º: {line}")
                continue
            filtered_lines.append(line)
        return "\n".join(filtered_lines)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üòì"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF
def create_pdf(content: str, filename: str):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", "", 12)
    pdf.multi_cell(0, 10, content.encode('latin-1', 'replace').decode('latin-1'))
    pdf.output(filename)
    logger.info(f"PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    check_subscription(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π SMM-–ø–æ–º–æ—â–Ω–∏–∫, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç! üòä –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower().strip()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription = check_subscription(user_id)
    if subscription["end_date"] < datetime.now() and subscription["status"] == "trial":
        await update.message.reply_text("–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å! üòä")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if "user_name" not in context.user_data:
        context.user_data["user_name"] = update.message.text
        await update.message.reply_text(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {context.user_data['user_name']}! üéâ "
            f"–£ —Ç–µ–±—è 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ü–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏! "
            f"–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç, –∏–¥–µ–∏ –¥–ª—è Reels –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–º. –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å? üòä"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if "–ø–æ—Å—Ç" in text:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}: –ø–æ—Å—Ç")
        context.user_data["state"] = "post_theme"
        await update.message.reply_text("–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø–æ—Å—Ç! üåü –£–∫–∞–∂–∏ —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ—Ñ–µ'):")
    elif "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è" in text:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
        context.user_data["state"] = "strategy_goal"
        await update.message.reply_text("–î–∞–≤–∞–π —Å–æ—Å—Ç–∞–≤–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é! üìà –£–∫–∞–∂–∏ —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å'):")
    elif context.user_data.get("state") == "post_theme":
        context.user_data["post_theme"] = update.message.text
        context.user_data["state"] = "post_style"
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è –ø–æ—Å—Ç–∞: üòä")
    elif context.user_data.get("state") == "post_style":
        style = update.message.text
        theme = context.user_data.get("post_theme")
        try:
            variants = await generate_post(theme, style)
            response = "\n\n".join(variants)
            await update.message.reply_text(f"–í–æ—Ç —Ç–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤:\n\n{response}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòì –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞?")
        finally:
            context.user_data["state"] = None
    elif context.user_data.get("state") == "strategy_goal":
        context.user_data["strategy_goal"] = update.message.text
        context.user_data["state"] = "strategy_audience"
        await update.message.reply_text("–•–æ—Ä–æ—à–∞—è —Ü–µ–ª—å! üéØ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–º–æ–ª–æ–¥—ë–∂—å 18-24'):")
    elif context.user_data.get("state") == "strategy_audience":
        context.user_data["strategy_audience"] = update.message.text
        context.user_data["state"] = "strategy_period"
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1 –º–µ—Å—è—Ü'):")
    elif context.user_data.get("state") == "strategy_period":
        period = update.message.text
        goal = context.user_data.get("strategy_goal")
        audience = context.user_data.get("strategy_audience")
        try:
            strategy = await generate_strategy(goal, audience, period)
            # –°–æ–∑–¥–∞—ë–º PDF
            filename = f"strategy_{user_id}.pdf"
            create_pdf(strategy, filename)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
            with open(filename, "rb") as f:
                await update.message.reply_document(document=f, filename=filename)
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            os.remove(filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòì –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞?")
        finally:
            context.user_data["state"] = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üòì")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞... üöÄ")
    application.run_webhook(
        listen="0.0.0.0",
        port=80,
        url_path="",
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/"
    )

if __name__ == "__main__":
    main()