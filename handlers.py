import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from together import Together
import os
from datetime import datetime, timedelta
from fpdf import FPDF
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

together_client = Together(api_key=os.getenv("TOGETHER_API_KEY"))
subscriptions = {}

def check_subscription(user_id: int) -> dict:
    if user_id not in subscriptions:
        start_date = datetime.now()
        end_date = start_date + timedelta(days=3)
        subscriptions[user_id] = {
            "start_date": start_date,
            "end_date": end_date,
            "status": "trial"
        }
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {subscriptions[user_id]}")
    return subscriptions[user_id]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
async def generate_post(theme: str, style: str) -> list[str]:
    max_attempts = 3
    for attempt in range(max_attempts):
        prompt = (
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–≤–Ω–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –Ω–∞ —Ç–µ–º—É '{theme}' –≤ {style} —Å—Ç–∏–ª–µ. "
            f"–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. "
            f"–†–∞–∑–¥–µ–ª—è–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–≤—É–º—è –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫–∏ (\n\n)."
        )
        try:
            response = together_client.completions.create(
                model="meta-llama/Llama-3-8b-chat-hf",
                prompt=prompt,
                max_tokens=150,
                temperature=0.7,
                top_p=0.9,
            )
            variants = response.choices[0].text.strip().split("\n\n")
            variants = [v.strip() for v in variants if v.strip()]
            if len(variants) >= 3:
                return variants[:3]
            else:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 3")
                if attempt == max_attempts - 1:
                    variants += ["–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üòä"] * (3 - len(variants))
                    return variants
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            if attempt == max_attempts - 1:
                return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"] * 3
    return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"] * 3

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async def generate_strategy(goal: str, audience: str, period: str) -> str:
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ '{goal}' –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ '{audience}' –Ω–∞ –ø–µ—Ä–∏–æ–¥ '{period}'. "
        f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 7-10 –ø—É–Ω–∫—Ç–æ–≤ —Å –º–∞—Ä–∫–µ—Ä–æ–º '* ', —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, "
        f"–∏—Å–ø–æ–ª—å–∑—É–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–í–ö, –Æ—Ç—É–±, –¢–∏–∫–¢–æ–∫, –ò–Ω—Å—Ç–∞–≥—Ä–∞–º). "
        f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ (Instagram ‚Üí –ò–Ω—Å—Ç–∞–≥—Ä–∞–º, Live ‚Üí –ø—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã)."
    )
    try:
        response = together_client.completions.create(
            model="meta-llama/Llama-3-8b-chat-hf",
            prompt=prompt,
            max_tokens=400,
            temperature=0.6,
        )
        strategy = response.choices[0].text.strip()
        lines = strategy.split("\n")
        filtered = []
        for line in lines:
            if not any(word in line.lower() for word in ["live", "instagram", "facebook"]):
                filtered.append(line)
        return "\n".join(filtered)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤
async def generate_hashtags(theme: str) -> str:
    prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5-7 —Ö—ç—à—Ç–µ–≥–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è —Ç–µ–º—ã '{theme}'."
    try:
        response = together_client.completions.create(
            model="meta-llama/Llama-3-8b-chat-hf",
            prompt=prompt,
            max_tokens=50,
            temperature=0.6,
        )
        hashtags = response.choices[0].text.strip()
        return hashtags
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à—Ç–µ–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –¥–ª—è –†–∏–ª—Å–æ–≤
async def generate_reels_idea(theme: str) -> str:
    prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–¥–µ—é –¥–ª—è –†–∏–ª—Å–∞ –Ω–∞ —Ç–µ–º—É '{theme}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."
    try:
        response = together_client.completions.create(
            model="meta-llama/Llama-3-8b-chat-hf",
            prompt=prompt,
            max_tokens=100,
            temperature=0.7,
        )
        idea = response.choices[0].text.strip()
        return idea
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏ –¥–ª—è –†–∏–ª—Å–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é –¥–ª—è –†–∏–ª—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ê/–ë —Ç–µ—Å—Ç–∞
async def generate_ab_test(goal: str) -> str:
    prompt = f"–°–æ—Å—Ç–∞–≤—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ê/–ë —Ç–µ—Å—Ç–∞ —Å —Ü–µ–ª—å—é '{goal}'. –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö—ç—à—Ç–µ–≥–∏."
    try:
        response = together_client.completions.create(
            model="meta-llama/Llama-3-8b-chat-hf",
            prompt=prompt,
            max_tokens=200,
            temperature=0.7,
        )
        ab_test = response.choices[0].text.strip()
        return ab_test
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê/–ë —Ç–µ—Å—Ç–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ê/–ë —Ç–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"

# –°–æ–∑–¥–∞–Ω–∏–µ PDF
def create_pdf(content: str, filename: str):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", "", 12)
    pdf.multi_cell(0, 10, content)
    pdf.output(filename)
    logger.info(f"PDF —Å–æ–∑–¥–∞–Ω: {filename}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    check_subscription(user_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip().lower()
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

    subscription = check_subscription(user_id)
    if subscription["end_date"] < datetime.now() and subscription["status"] == "trial":
        await update.message.reply_text("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å!")
        return

    if "user_name" not in context.user_data:
        context.user_data["user_name"] = update.message.text
        await update.message.reply_text(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {context.user_data['user_name']}! üéâ –í—ã–±–µ—Ä–∏—Ç–µ: –ø–æ—Å—Ç, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —Ö–µ—à—Ç–µ–≥–∏, —Ä–∏–ª—Å –∏–ª–∏ –ê/–ë —Ç–µ—Å—Ç"
        )
        return

    if "–ø–æ—Å—Ç" in text:
        context.user_data["state"] = "post_theme"
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞:")
    elif "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è" in text:
        context.user_data["state"] = "strategy_goal"
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
    elif "—Ö–µ—à—Ç–µ–≥–∏" in text:
        context.user_data["state"] = "hashtags_theme"
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à—Ç–µ–≥–æ–≤:")
    elif "—ÄŸäŸÑ—Å" in text:
        context.user_data["state"] = "reels_theme"
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–¥–µ–∏ –†–∏–ª—Å–∞:")
    elif "–∞/–± —Ç–µ—Å—Ç" in text or "–∞–± —Ç–µ—Å—Ç" in text:
        context.user_data["state"] = "ab_test_goal"
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ê/–ë —Ç–µ—Å—Ç–∞:")
    elif context.user_data.get("state") == "post_theme":
        context.user_data["post_theme"] = text
        context.user_data["state"] = "post_style"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ—Å—Ç–∞:")
    elif context.user_data.get("state") == "post_style":
        style = text
        theme = context.user_data["post_theme"]
        try:
            variants = await generate_post(theme, style)
            response = "\n\n".join([f"{i+1}. {v}" for i, v in enumerate(variants)])
            await update.message.reply_text(f"–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n{response}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ")
        finally:
            context.user_data.pop("state", None)
    elif context.user_data.get("state") == "strategy_goal":
        context.user_data["strategy_goal"] = text
        context.user_data["state"] = "strategy_audience"
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:")
    elif context.user_data.get("state") == "strategy_audience":
        context.user_data["strategy_audience"] = text
        context.user_data["state"] = "strategy_period"
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1 –º–µ—Å—è—Ü'):")
    elif context.user_data.get("state") == "strategy_period":
        period = text
        try:
            strategy = await generate_strategy(
                context.user_data["strategy_goal"],
                context.user_data["strategy_audience"],
                period
            )
            filename = f"strategy_{user_id}.pdf"
            create_pdf(strategy, filename)
            with open(filename, "rb") as f:
                await update.message.reply_document(f)
            os.remove(filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        finally:
            context.user_data.pop("state", None)
    elif context.user_data.get("state") == "hashtags_theme":
        theme = text
        try:
            hashtags = await generate_hashtags(theme)
            await update.message.reply_text(f"–í–∞—à–∏ —Ö–µ—à—Ç–µ–≥–∏:\n{hashtags}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ")
        finally:
            context.user_data.pop("state", None)
    elif context.user_data.get("state") == "reels_theme":
        theme = text
        try:
            idea = await generate_reels_idea(theme)
            await update.message.reply_text(f"–í–∞—à–∞ –∏–¥–µ—è –¥–ª—è –†–∏–ª—Å–∞:\n{idea}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –†–∏–ª—Å–∞: {e}")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ")
        finally:
            context.user_data.pop("state", None)
    elif context.user_data.get("state") == "ab_test_goal":
        goal = text
        try:
            ab_test = await generate_ab_test(goal)
            await update.message.reply_text(f"–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ê/–ë —Ç–µ—Å—Ç–∞:\n{ab_test}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ê/–ë —Ç–µ—Å—Ç–∞: {e}")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ")
        finally:
            context.user_data.pop("state", None)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_error_handler(error_handler)
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 80)),
        url_path="",
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/"
    )

if __name__ == "__main__":
    main()