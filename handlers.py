from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from utils import check_subscription, generate_with_together, generate_hashtags, generate_pdf, PROMPTS, subscriptions
from datetime import datetime
import logging
import os
import re

logger = logging.getLogger(__name__)

THEME, STYLE, TEMPLATE, IDEAS, EDIT = range(5)
GOAL, AUDIENCE, PERIOD = range(3)

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [["–ü–æ—Å—Ç", "–†–∏–ª—Å"], ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–•–µ—à—Ç–µ–≥–∏"], ["–ê/–ë —Ç–µ—Å—Ç"]],
    resize_keyboard=True
)

STYLE_KEYBOARD = ReplyKeyboardMarkup(
    [["–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"], ["–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π"]],
    resize_keyboard=True
)

def remove_english_text(text):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞."""
    lines = text.split('\n')
    filtered_lines = []
    for line in lines:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã
        if not re.search(r'[a-zA-Z]', line):
            filtered_lines.append(line)
        else:
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º: {line}")
    return '\n'.join(filtered_lines)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    user_id = update.effective_user.id
    check_subscription(user_id)

    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø SMM-–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. üéâ\n"
        "–£ —Ç–µ–±—è 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ü–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏! –ü–æ–ø—Ä–æ–±—É–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç, –∏–¥–µ–∏ –¥–ª—è Reels –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω."
    )
    await update.message.reply_text(welcome_message, reply_markup=MAIN_KEYBOARD)
    logger.info("–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message.text.strip().lower()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}: {message}")

    if message == "/start":
        await start(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    if message == "–ø–æ—Å—Ç":
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ—Ñ–µ'):")
        context.user_data['action'] = 'post_theme'
        return
    elif message == "—Ä–∏–ª—Å":
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–º—É –¥–ª—è Reels (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª'):")
        context.user_data['action'] = 'reels_theme'
        return
    elif message == "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è":
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ü–µ–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å'):")
        context.user_data['action'] = 'strategy_goal'
        return
    elif message == "—Ö–µ—à—Ç–µ–≥–∏":
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–º—É –¥–ª—è —Ö—ç—à—Ç–µ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'):")
        context.user_data['action'] = 'generate_hashtags'
        return
    elif message == "–∞/–± —Ç–µ—Å—Ç":
        await update.message.reply_text("–£–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å—Ç–∞'):")
        context.user_data['action'] = 'ab_test'
        return

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=MAIN_KEYBOARD)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {update.message.from_user.id}: {update.message.text}")
    action = context.user_data.get('action')
    message = update.message.text.strip().lower()

    if action:
        if action == 'post_theme':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
            context.user_data['theme'] = message
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –ø–æ—Å—Ç–∞:", reply_markup=STYLE_KEYBOARD)
            context.user_data['action'] = 'post_style'
        elif action == 'post_style':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
            theme = context.user_data.get('theme')
            style = message
            prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ —Ç–µ–º—É '{theme}' –≤ —Å—Ç–∏–ª–µ '{style}'. –í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—ë–Ω –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π."
            try:
                text = generate_with_together(prompt)
                # –£–¥–∞–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –≤—Å—ë –∂–µ –ø–æ—è–≤–∏–ª—Å—è
                text = remove_english_text(text)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
                variants = [v.strip() for v in text.split('\n\n') if v.strip()]
                context.user_data['post_variants'] = variants
                if len(variants) != 3:
                    logger.warning(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 3: {text}")
                    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD)
                    context.user_data['action'] = None
                    context.user_data['theme'] = None
                    return
                await update.message.reply_text(f"–í–æ—Ç —Ç–≤–æ–∏ –ø–æ—Å—Ç—ã:\n\n{text}\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç: 1, 2 –∏–ª–∏ 3")
                context.user_data['action'] = 'post_select'
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD)
                context.user_data['action'] = None
                context.user_data['theme'] = None
        elif action == 'post_select':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å—Ç–∞
            variants = context.user_data.get('post_variants', [])
            try:
                choice = int(message) - 1
                if 0 <= choice < len(variants):
                    selected_post = variants[choice]
                    await update.message.reply_text(f"–¢—ã –≤—ã–±—Ä–∞–ª:\n\n{selected_post}", reply_markup=MAIN_KEYBOARD)
                else:
                    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ 1, 2 –∏–ª–∏ 3.")
                    return  # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º action, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ 1, 2 –∏–ª–∏ 3.")
                return  # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º action, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
            context.user_data['action'] = None
            context.user_data['post_variants'] = None
            context.user_data['theme'] = None
        elif action == 'reels_theme':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
            context.user_data['theme'] = message
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è Reels:", reply_markup=STYLE_KEYBOARD)
            context.user_data['action'] = 'reels_style'
        elif action == 'reels_style':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–¥–µ–π –¥–ª—è Reels –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
            theme = context.user_data.get('theme')
            style = message
            prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–¥–µ–π –¥–ª—è Reels –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ —Ç–µ–º—É '{theme}' –≤ —Å—Ç–∏–ª–µ '{style}'. –í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—ë–Ω –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π."
            try:
                text = generate_with_together(prompt)
                text = remove_english_text(text)
                variants = [v.strip() for v in text.split('\n\n') if v.strip()]
                context.user_data['reels_variants'] = variants
                if len(variants) != 3:
                    logger.warning(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 3: {text}")
                    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD)
                    context.user_data['action'] = None
                    context.user_data['theme'] = None
                    return
                await update.message.reply_text(f"–í–æ—Ç –∏–¥–µ–∏ –¥–ª—è Reels:\n\n{text}\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç: 1, 2 –∏–ª–∏ 3")
                context.user_data['action'] = 'reels_select'
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Reels: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Reels. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD)
                context.user_data['action'] = None
                context.user_data['theme'] = None
        elif action == 'reels_select':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ Reels
            variants = context.user_data.get('reels_variants', [])
            try:
                choice = int(message) - 1
                if 0 <= choice < len(variants):
                    selected_reel = variants[choice]
                    await update.message.reply_text(f"–¢—ã –≤—ã–±—Ä–∞–ª:\n\n{selected_reel}", reply_markup=MAIN_KEYBOARD)
                else:
                    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ 1, 2 –∏–ª–∏ 3.")
                    return
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ 1, 2 –∏–ª–∏ 3.")
                return
            context.user_data['action'] = None
            context.user_data['reels_variants'] = None
            context.user_data['theme'] = None
        elif action == 'strategy_goal':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¶–ê
            context.user_data['goal'] = message
            await update.message.reply_text("–£–∫–∞–∂–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–º–æ–ª–æ–¥—ë–∂—å 18-24'):")
            context.user_data['action'] = 'strategy_audience'
        elif action == 'strategy_audience':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¶–ê –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
            context.user_data['audience'] = message
            await update.message.reply_text("–£–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1 –º–µ—Å—è—Ü'):")
            context.user_data['action'] = 'strategy_period'
        elif action == 'strategy_period':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ PDF
            goal = context.user_data.get('goal')
            audience = context.user_data.get('audience')
            period = message
            prompt = (
                f"–°–æ–∑–¥–∞–π SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ '{goal}' –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ '{audience}' –Ω–∞ –ø–µ—Ä–∏–æ–¥ '{period}'. "
                f"–í–∫–ª—é—á–∏ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: 1) –¶–µ–ª–∏ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é, 2) –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞, 3) –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞, 4) –°—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ–≤–ª–µ—á–µ–Ω–∏—è, "
                f"5) –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞–º–∏, 6) –ü–ª–∞—Ç–Ω—É—é —Ä–µ–∫–ª–∞–º—É, 7) –ú–µ—Ç—Ä–∏–∫–∏ –∏ –æ—Ü–µ–Ω–∫—É, 8) –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏–¥–µ—è–º–∏ –ø–æ—Å—Ç–æ–≤ –∏ —Å—Ç–æ—Ä–∏—Å. "
                f"–í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—ë–Ω –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π."
            )
            try:
                text = generate_with_together(prompt)
                text = remove_english_text(text)
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
                pdf_path = f"strategy_{update.effective_user.id}.pdf"
                generate_pdf(text, pdf_path)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
                with open(pdf_path, 'rb') as pdf_file:
                    await update.message.reply_document(document=pdf_file, caption="–í–æ—Ç —Ç–≤–æ—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ PDF:", reply_markup=MAIN_KEYBOARD)
                os.remove(pdf_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD)
            context.user_data['action'] = None
            context.user_data['goal'] = None
            context.user_data['audience'] = None
        elif action == 'generate_hashtags':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à—Ç–µ–≥–∏
            try:
                hashtags = generate_hashtags(message)
                hashtags = remove_english_text(hashtags)
                await update.message.reply_text(f"–í–æ—Ç —Ö—ç—à—Ç–µ–≥–∏:\n\n{hashtags}", reply_markup=MAIN_KEYBOARD)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", reply_markup=MAIN_KEYBOARD)
            context.user_data['action'] = None
        elif action == 'ab_test':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ê/–ë —Ç–µ—Å—Ç–∞
            prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –ê/–ë —Ç–µ—Å—Ç–∞: {message}. –í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤."
            try:
                text = generate_with_together(prompt)
                text = remove_english_text(text)
                await update.message.reply_text(f"–í–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ê/–ë —Ç–µ—Å—Ç–∞:\n\n{text}", reply_markup=MAIN_KEYBOARD)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê/–ë —Ç–µ—Å—Ç–∞: {e}")
               