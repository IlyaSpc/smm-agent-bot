from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from utils import check_subscription, generate_with_together, generate_hashtags, generate_pdf, PROMPTS, subscriptions
from datetime import datetime
import logging
import os

logger = logging.getLogger(__name__)

THEME, STYLE, TEMPLATE, IDEAS, EDIT = range(5)
GOAL, AUDIENCE, PERIOD = range(3)

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [["–ü–æ—Å—Ç", "–†–∏–ª—Å"], ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–•–µ—à—Ç–µ–≥–∏"], ["–ê/–ë —Ç–µ—Å—Ç"]],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    user_id = update.effective_user.id
    check_subscription(user_id)

    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø SMM-–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. üéâ\n"
        "–£ —Ç–µ–±—è 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ü–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏! –ü–æ–ø—Ä–æ–±—É–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç, –∏–¥–µ–∏ –¥–ª—è Reels –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω."
    )
    await update.message.reply_text(welcome_message, reply_markup=MAIN_KEYBOARD)
    logger.info("–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message.text.strip().lower()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}: {message}")

    if message == "/start":
        await start(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    if message == "–ø–æ—Å—Ç":
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ—Ñ–µ'):")
        context.user_data['action'] = 'generate_post'
        return
    elif message == "—Ä–∏–ª—Å":
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–º—É –¥–ª—è Reels (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª'):")
        context.user_data['action'] = 'generate_reels'
        return
    elif message == "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è":
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ü–µ–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å'):")
        context.user_data['action'] = 'generate_strategy'
        return
    elif message == "—Ö–µ—à—Ç–µ–≥–∏":
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–º—É –¥–ª—è —Ö—ç—à—Ç–µ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'):")
        context.user_data['action'] = 'generate_hashtags'
        return
    elif message == "–∞/–± —Ç–µ—Å—Ç":
        await update.message.reply_text("–£–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å—Ç–∞'):")
        context.user_data['action'] = 'ab_test'
        return

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=MAIN_KEYBOARD)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {update.message.from_user.id}: {update.message.text}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    action = context.user_data.get('action')
    message = update.message.text.strip()

    if action:
        if action == 'generate_post':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
            prompt = PROMPTS['post']['–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π'].format(theme=message, template="–∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç")
            try:
                text = generate_with_together(prompt)
                await update.message.reply_text(f"–í–æ—Ç —Ç–≤–æ–π –ø–æ—Å—Ç:\n\n{text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
            context.user_data['action'] = None
        elif action == 'generate_reels':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ—é –¥–ª—è Reels
            prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –¥–ª—è Reels –Ω–∞ —Ç–µ–º—É '{message}'."
            try:
                text = generate_with_together(prompt)
                await update.message.reply_text(f"–í–æ—Ç –∏–¥–µ—è –¥–ª—è Reels:\n\n{text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Reels: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Reels. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
            context.user_data['action'] = None
        elif action == 'generate_strategy':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Ü–µ–ª–∏
            goal = message
            prompt = f"–°–æ–∑–¥–∞–π SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ '{goal}' –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ '–º–æ–ª–æ–¥—ë–∂—å' –Ω–∞ –ø–µ—Ä–∏–æ–¥ 1 –º–µ—Å—è—Ü."
            try:
                text = generate_with_together(prompt)
                await update.message.reply_text(f"–í–æ—Ç —Ç–≤–æ—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:\n\n{text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
            context.user_data['action'] = None
        elif action == 'generate_hashtags':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à—Ç–µ–≥–∏
            try:
                hashtags = generate_hashtags(message)
                await update.message.reply_text(f"–í–æ—Ç —Ö—ç—à—Ç–µ–≥–∏:\n\n{hashtags}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
            context.user_data['action'] = None
        elif action == 'ab_test':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ê/–ë —Ç–µ—Å—Ç–∞
            prompt = f"–ü—Ä–∏–¥—É–º–∞–π –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –ê/–ë —Ç–µ—Å—Ç–∞: {message}."
            try:
                text = generate_with_together(prompt)
                await update.message.reply_text(f"–í–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ê/–ë —Ç–µ—Å—Ç–∞:\n\n{text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê/–ë —Ç–µ—Å—Ç–∞: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ê/–ë —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
            context.user_data['action'] = None
    else:
        # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handle_message(update, context)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–í—ã–∑–æ–≤ handle_voice")
    voice_file = await update.message.voice.get_file()
    file_path = f"voice_{update.message.message_id}.ogg"
    await voice_file.download_to_drive(file_path)
    await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
    os.remove(file_path)