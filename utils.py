import os
import json
import requests
from datetime import datetime, timedelta
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import mm
from io import BytesIO
import logging
import threading

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
subscriptions = {}
subscription_expiry = {}
trial_start = {}
DEVELOPER_ID = 477468896
state_lock = threading.Lock()  # –î–ª—è –∑–∞—â–∏—Ç—ã —Å–ª–æ–≤–∞—Ä–µ–π

TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")
TOGETHER_API_URL = "https://api.together.xyz/v1/chat/completions"

try:
    with open('prompts.json', 'r', encoding='utf-8') as f:
        PROMPTS = json.load(f)
except FileNotFoundError:
    logger.error("–§–∞–π–ª prompts.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    PROMPTS = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª
def save_state():
    with state_lock:
        state = {
            "subscriptions": subscriptions,
            "subscription_expiry": {k: v.isoformat() if v else None for k, v in subscription_expiry.items()},
            "trial_start": {k: v.isoformat() if v else None for k, v in trial_start.items()}
        }
        try:
            with open("state.json", "w", encoding="utf-8") as f:
                json.dump(state, f)
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ state.json")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ state.json: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def load_state():
    global subscriptions, subscription_expiry, trial_start
    try:
        with open("state.json", "r", encoding="utf-8") as f:
            state = json.load(f)
            subscriptions.update(state["subscriptions"])
            subscription_expiry.update({
                k: datetime.fromisoformat(v) if v else None
                for k, v in state["subscription_expiry"].items()
            })
            trial_start.update({
                k: datetime.fromisoformat(v) if v else None
                for k, v in state["trial_start"].items()
            })
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ state.json")
    except FileNotFoundError:
        logger.info("–§–∞–π–ª state.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ state.json: {e}")

def generate_with_together(prompt):
    if not TOGETHER_API_KEY:
        logger.error("TOGETHER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return "–û—à–∏–±–∫–∞: API –∫–ª—é—á –¥–ª—è Together AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. üòî"
    headers = {
        "Authorization": f"Bearer {TOGETHER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "meta-llama/Llama-3-8b-chat-hf",
        "messages": [
            {"role": "system", "content": "–¢—ã –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 1000,
        "temperature": 0.7,
        "top_p": 0.9
    }
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Together AI: {prompt[:50]}...")
        response = requests.post(TOGETHER_API_URL, headers=headers, json=payload, timeout=30)
        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"].strip()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Together AI: {response.status_code} - {response.text}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòî"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Together AI: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòî"

def generate_hashtags(topic):
    words = topic.split()
    base_hashtags = [f"#{word}" for word in words if len(word) > 2]
    thematic_hashtags = {
        "–º–æ–¥–∞": ["#–º–æ–¥–∞", "#—Å—Ç–∏–ª—å", "#—Ç—Ä–µ–Ω–¥—ã", "#–æ–±—Ä–∞–∑", "#–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"],
        "–∫–æ—Ñ–µ": ["#–∫–æ—Ñ–µ", "#—É—Ç—Ä–æ", "#—ç–Ω–µ—Ä–≥–∏—è", "#–≤–∫—É—Å", "#–Ω–∞–ø–∏—Ç–æ–∫"],
        "—Ñ–∏—Ç–Ω–µ—Å": ["#—Ñ–∏—Ç–Ω–µ—Å", "#—Å–ø–æ—Ä—Ç", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#–º–æ—Ç–∏–≤–∞—Ü–∏—è", "#—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"]
    }
    relevant_tags = []
    topic_lower = topic.lower()
    for key in thematic_hashtags:
        if key in topic_lower:
            relevant_tags.extend(thematic_hashtags[key])
            break
    if not relevant_tags:
        relevant_tags = ["#—Å–æ—Ü—Å–µ—Ç–∏", "#–∂–∏–∑–Ω—å", "#–∏–¥–µ–∏", "#–ø–æ–ª–µ–∑–Ω–æ", "#–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"]
    combined = list(dict.fromkeys(base_hashtags + relevant_tags))[:10]
    return " ".join(combined)

def check_subscription(user_id):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    with state_lock:
        try:
            if user_id == DEVELOPER_ID:
                subscriptions[user_id] = "lifetime"
                subscription_expiry[user_id] = None
                save_state()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, –ø–æ–¥–ø–∏—Å–∫–∞ lifetime")
                return True
            if user_id not in subscriptions or subscriptions[user_id] == "none":
                if user_id not in trial_start:
                    trial_start[user_id] = datetime.now()
                    subscriptions[user_id] = "full"
                    subscription_expiry[user_id] = trial_start[user_id] + timedelta(days=3)
                    save_state()
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è")
                    return True
                else:
                    current_time = datetime.now()
                    expiry_time = subscription_expiry[user_id]
                    logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: —Ç–µ–∫—É—â–µ–µ {current_time}, –∏—Å—Ç–µ–∫–∞–µ—Ç {expiry_time}")
                    if current_time > expiry_time:
                        subscriptions[user_id] = "none"
                        save_state()
                        logger.info(f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç—ë–∫")
                        return False
                    logger.info(f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç")
                    return True
            if subscriptions[user_id] in ["lite", "full"]:
                current_time = datetime.now()
                expiry_time = subscription_expiry[user_id]
                logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: —Ç–µ–∫—É—â–µ–µ {current_time}, –∏—Å—Ç–µ–∫–∞–µ—Ç {expiry_time}")
                if current_time > expiry_time:
                    subscriptions[user_id] = "none"
                    save_state()
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞")
                    return False
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_subscription: {e}")
            raise

def generate_pdf(strategy_text):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    
    try:
        pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
        c.setFont('DejaVuSans', 12)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç DejaVuSans: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç.")
        c.setFont('Helvetica', 12)

    width, height = A4
    margin = 20 * mm
    y_position = height - margin

    c.setFont('DejaVuSans' if 'DejaVuSans' in pdfmetrics.getRegisteredFontNames() else 'Helvetica', 16)
    c.drawString(margin, y_position, "SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω")
    y_position -= 20 * mm

    c.setFont('DejaVuSans' if 'DejaVuSans' in pdfmetrics.getRegisteredFontNames() else 'Helvetica', 12)
    lines = strategy_text.split('\n')
    for line in lines:
        if y_position < margin:
            c.showPage()
            c.setFont('DejaVuSans' if 'DejaVuSans' in pdfmetrics.getRegisteredFontNames() else 'Helvetica', 12)
            y_position = height - margin
        c.drawString(margin, y_position, line)
        y_position -= 5 * mm

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer