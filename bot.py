import os
import json
import requests
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, filters
import logging
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import mm
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler (–¥–ª—è –ø–æ—Å—Ç–æ–≤)
THEME, STYLE, TEMPLATE, IDEAS, EDIT = range(5)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler (–¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
GOAL, AUDIENCE, PERIOD = range(3)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –¥–∞—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è
subscriptions = {}
subscription_expiry = {}
trial_start = {}

# ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
DEVELOPER_ID = 477468896

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ JSON
try:
    with open('prompts.json', 'r', encoding='utf-8') as f:
        PROMPTS = json.load(f)
except FileNotFoundError:
    logger.error("–§–∞–π–ª prompts.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    PROMPTS = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Together AI
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")
TOGETHER_API_URL = "https://api.together.xyz/v1/chat/completions"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Together AI (LLaMA-3-8B)
def generate_with_together(prompt):
    headers = {
        "Authorization": f"Bearer {TOGETHER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "meta-llama/Llama-3-8b-chat-hf",
        "messages": [
            {"role": "system", "content": "–¢—ã –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 1000,
        "temperature": 0.7,
        "top_p": 0.9
    }
    try:
        response = requests.post(TOGETHER_API_URL, headers=headers, json=payload, timeout=30)
        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"].strip()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Together AI: {response.status_code} - {response.text}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòî"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Together AI: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòî"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤
def generate_hashtags(topic):
    words = topic.split()
    base_hashtags = [f"#{word}" for word in words if len(word) > 2]
    thematic_hashtags = {
        "–º–æ–¥–∞": ["#–º–æ–¥–∞", "#—Å—Ç–∏–ª—å", "#—Ç—Ä–µ–Ω–¥—ã", "#–æ–±—Ä–∞–∑", "#–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"],
        "–∫–æ—Ñ–µ": ["#–∫–æ—Ñ–µ", "#—É—Ç—Ä–æ", "#—ç–Ω–µ—Ä–≥–∏—è", "#–≤–∫—É—Å", "#–Ω–∞–ø–∏—Ç–æ–∫"],
        "—Ñ–∏—Ç–Ω–µ—Å": ["#—Ñ–∏—Ç–Ω–µ—Å", "#—Å–ø–æ—Ä—Ç", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#–º–æ—Ç–∏–≤–∞—Ü–∏—è", "#—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"]
    }
    relevant_tags = []
    topic_lower = topic.lower()
    for key in thematic_hashtags:
        if key in topic_lower:
            relevant_tags.extend(thematic_hashtags[key])
            break
    if not relevant_tags:
        relevant_tags = ["#—Å–æ—Ü—Å–µ—Ç–∏", "#–∂–∏–∑–Ω—å", "#–∏–¥–µ–∏", "#–ø–æ–ª–µ–∑–Ω–æ", "#–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"]
    combined = list(dict.fromkeys(base_hashtags + relevant_tags))[:10]
    return " ".join(combined)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription(user_id):
    if user_id == DEVELOPER_ID:
        subscriptions[user_id] = "lifetime"
        subscription_expiry[user_id] = None
        return True
    if user_id not in subscriptions or subscriptions[user_id] == "none":
        if user_id not in trial_start:
            trial_start[user_id] = datetime.now()
            subscriptions[user_id] = "full"
            subscription_expiry[user_id] = trial_start[user_id] + timedelta(days=3)
            return True
        else:
            if datetime.now() > subscription_expiry[user_id]:
                subscriptions[user_id] = "none"
                return False
            return True
    if subscriptions[user_id] in ["lite", "full"]:
        if datetime.now() > subscription_expiry[user_id]:
            subscriptions[user_id] = "none"
            return False
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
def generate_pdf(strategy_text):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    
    pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
    c.setFont('DejaVuSans', 12)

    width, height = A4
    margin = 20 * mm
    y_position = height - margin

    c.setFont('DejaVuSans', 16)
    c.drawString(margin, y_position, "SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω")
    y_position -= 20 * mm

    c.setFont('DejaVuSans', 12)
    lines = strategy_text.split('\n')
    for line in lines:
        if y_position < margin:
            c.showPage()
            c.setFont('DejaVuSans', 12)
            y_position = height - margin
        c.drawString(margin, y_position, line)
        y_position -= 5 * mm

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    check_subscription(user_id)

    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø SMM Agent Bot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. üéâ\n"
        "–£ —Ç–µ–±—è 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ü–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏! –ü–æ–ø—Ä–æ–±—É–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç ('–ü–æ—Å—Ç'), "
        "–∏–¥–µ–∏ –¥–ª—è Reels ('Reels') –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é ('/—Å—Ç—Ä–∞—Ç–µ–≥–∏—è').\n\n"
        "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –ò–ª—å—è –ß–µ—á—É–µ–≤ (@i_chechuev). –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –º–æ–π Telegram-–∫–∞–Ω–∞–ª @ChechuevSMM, "
        "—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ SMM –∏ –±–æ—Ç–∞—Ö!\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É: /–ø–æ–¥–ø–∏—Å–∫–∞\n\n"
        "–ß—Ç–æ –¥–µ–ª–∞–µ–º?"
    )
    await update.message.reply_text(welcome_message)

# –ö–æ–º–∞–Ω–¥–∞ /–ø–æ–¥–ø–∏—Å–∫–∞
async def podpiska(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not check_subscription(user_id):
        message = (
            "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:\n"
            "1. –õ–∞–π—Ç ‚Äî 300 —Ä—É–±./–º–µ—Å (–∏–ª–∏ 1620 —Ä—É–±. –∑–∞ 6 –º–µ—Å, 2880 —Ä—É–±. –∑–∞ –≥–æ–¥)\n"
            "2. –ü–æ–ª–Ω–∞—è ‚Äî 600 —Ä—É–±./–º–µ—Å (–∏–ª–∏ 3240 —Ä—É–±. –∑–∞ 6 –º–µ—Å, 5760 —Ä—É–±. –∑–∞ –≥–æ–¥)\n"
            "3. –†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ ‚Äî 10 000 —Ä—É–±. (–Ω–∞–≤—Å–µ–≥–¥–∞)\n\n"
            "–ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞–ø–∏—à–∏ @i_chechuev –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é."
        )
        await update.message.reply_text(message)
    else:
        expiry_date = subscription_expiry[user_id].strftime("%Y-%m-%d") if subscription_expiry[user_id] else "–Ω–∞–≤—Å–µ–≥–¥–∞"
        await update.message.reply_text(
            f"–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞: {subscriptions[user_id]} (–¥–æ {expiry_date}).\n"
            "–•–æ—á–µ—à—å –ø—Ä–æ–¥–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? –ù–∞–ø–∏—à–∏ /–ø–æ–¥–ø–∏—Å–∫–∞."
        )

# –ö–æ–º–∞–Ω–¥–∞ /—Å—Ç—Ä–∞—Ç–µ–≥–∏—è
async def strategiya(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not check_subscription(user_id):
        await update.message.reply_text(
            "–¢–≤–æ–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫! –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É: /–ø–æ–¥–ø–∏—Å–∫–∞"
        )
        return ConversationHandler.END

    if subscriptions[user_id] not in ["full", "lifetime"]:
        await update.message.reply_text(
            "–§—É–Ω–∫—Ü–∏—è '–°—Ç—Ä–∞—Ç–µ–≥–∏—è' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ü–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É: /–ø–æ–¥–ø–∏—Å–∫–∞"
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? –ù–∞–ø—Ä–∏–º–µ—Ä: –£–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å, –ü—Ä–∏–≤–ª–µ—á—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç."
    )
    return GOAL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ConversationHandler (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['goal'] = update.message.text
    await update.message.reply_text(
        "–ö—Ç–æ —Ç–≤–æ—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è? –ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–ª–æ–¥—ë–∂—å 18-25 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è –º–æ–¥–æ–π, –∞–∫—Ç–∏–≤–Ω—ã –≤ Instagram."
    )
    return AUDIENCE

async def audience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['audience'] = update.message.text
    await update.message.reply_text(
        "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –Ω—É–∂–µ–Ω –ø–ª–∞–Ω? –ù–∞–ø—Ä–∏–º–µ—Ä: 1 –Ω–µ–¥–µ–ª—è, 1 –º–µ—Å—è—Ü."
    )
    return PERIOD

async def period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['period'] = update.message.text
    goal = context.user_data['goal']
    audience = context.user_data['audience']
    period = context.user_data['period']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏
    goal_lower = goal.lower()
    if "–≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å" in goal_lower:
        strategy_type = "engagement"
    elif "–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤" in goal_lower:
        strategy_type = "followers"
    elif "–ø—Ä–æ–¥–∞—Ç—å" in goal_lower or "–ø—Ä–æ–¥–∞–∂" in goal_lower:
        strategy_type = "sales"
    else:
        strategy_type = "engagement"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ JSON
    strategy_prompt = PROMPTS.get("strategy", {}).get(strategy_type, "–°–æ—Å—Ç–∞–≤—å SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience}, –ø–µ—Ä–∏–æ–¥: {period}.")
    strategy_prompt = strategy_prompt.format(audience=audience, channels="Instagram, Telegram", result="—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —á–µ—Ä–µ–∑ Together AI
    strategy_text = generate_with_together(strategy_prompt)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à—Ç–µ–≥–∏
    hashtags = generate_hashtags("–º–æ–¥–∞")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    pdf_buffer = generate_pdf(strategy_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_document(
        document=pdf_buffer,
        filename=f"SMM_Strategy_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
        caption=f"–í–æ—Ç —Ç–≤–æ—è SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω! üìÑ\n\n{hashtags}"
    )

    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not check_subscription(user_id):
        await update.message.reply_text(
            "–¢–≤–æ–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫! –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É: /–ø–æ–¥–ø–∏—Å–∫–∞"
        )
        return

    text = update.message.text
    subscription_type = subscriptions.get(user_id, "lite")

    if text == "–ü–æ—Å—Ç":
        if subscription_type in ["lite", "full"]:
            await update.message.reply_text("–û —á—ë–º –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç? (—É–∫–∞–∂–∏ —Ç–µ–º—É)")
            return THEME
        else:
            await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π. –û—Ñ–æ—Ä–º–∏: /–ø–æ–¥–ø–∏—Å–∫–∞")
    else:
        await update.message.reply_text("–Ø –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã '–ü–æ—Å—Ç' –∏ '/—Å—Ç—Ä–∞—Ç–µ–≥–∏—è'. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–ª—é –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π! üòä")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ConversationHandler (–ø–æ—Å—Ç—ã)
async def theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data['theme'] = update.message.text

    if subscriptions[user_id] == "full":
        await update.message.reply_text("–ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞? –§–æ—Ä–º–∞–ª—å–Ω—ã–π, –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π")
        return STYLE
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω: –°—Ç–∞–Ω–¥–∞—Ä—Ç, –û–±—ä—è–≤–ª–µ–Ω–∏–µ, –û–ø—Ä–æ—Å, –ö–µ–π—Å")
        return TEMPLATE

async def style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['style'] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω: –°—Ç–∞–Ω–¥–∞—Ä—Ç, –û–±—ä—è–≤–ª–µ–Ω–∏–µ, –û–ø—Ä–æ—Å, –ö–µ–π—Å")
    return TEMPLATE

async def template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['template'] = update.message.text
    theme = context.user_data['theme']
    style = context.user_data.get('style', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π').lower()
    template = context.user_data['template']

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
    ideas = [
        f"–ò–¥–µ—è 1: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑—É {theme} –≤ —Å—Ç–∏–ª–µ {style}",
        f"–ò–¥–µ—è 2: –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ {theme} –≤ —Å—Ç–∏–ª–µ {style}",
        f"–ò–¥–µ—è 3: –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –ø—Ä–æ {theme} –≤ —Å—Ç–∏–ª–µ {style}"
    ]
    context.user_data['ideas'] = ideas
    await update.message.reply_text("–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π:\n" + "\n".join(ideas) + "\n\n–í—ã–±–µ—Ä–∏ –∏–¥–µ—é (1, 2, 3)")
    return IDEAS

async def ideas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idea_number = update.message.text
    theme = context.user_data['theme']
    style = context.user_data.get('style', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π').lower()
    template = context.user_data['template']
    ideas = context.user_data['ideas']

    if idea_number in ["1", "2", "3"]:
        idea = ideas[int(idea_number) - 1].split(": ")[1]
    else:
        idea = "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑—É —Ç–µ–º—ã"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ JSON
    post_prompt = PROMPTS.get("post", {}).get(style, "–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É {theme} –≤ —Ñ–æ—Ä–º–∞—Ç–µ {template}.")
    post_prompt = post_prompt.format(
        theme=theme,
        template=template,
        idea=idea,
        goal="–ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ",
        main_idea="–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑—É —Ç–µ–º—ã",
        facts="–æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö",
        pains="–Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ Together AI
    post = generate_with_together(post_prompt)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à—Ç–µ–≥–∏
    hashtags = generate_hashtags(theme)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['last_result'] = post

    await update.message.reply_text(f"–ì–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç:\n{post}\n\n{hashtags}\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø–∏—à–∏ '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'")
    return EDIT

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text.lower() == "–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await update.message.reply_text("–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ—Å—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É–±–µ—Ä–∏ —Å–ª–æ–≤–æ –∫–æ—Ñ–µ')")
        return EDIT
    elif text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏ '–ü–æ—Å—Ç' –∏–ª–∏ '/—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    else:
        edit_request = text
        last_result = context.user_data['last_result']
        style = context.user_data.get('style', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π').lower()
        template = context.user_data['template']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_prompt = (
            f"–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: '{last_result}' —Å —É—á—ë—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{edit_request}'. "
            f"–°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å: {style}, —à–∞–±–ª–æ–Ω: {template}. –ü–∏—à–∏ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –±–µ–∑ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤. "
            f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Together AI
        edited_post = generate_with_together(edit_prompt)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        context.user_data['last_result'] = edited_post

        await update.message.reply_text(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç:\n{edited_post}\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â—ë —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏ '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', –∏–ª–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return EDIT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏ '–ü–æ—Å—Ç' –∏–ª–∏ '/—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("–ø–æ–¥–ø–∏—Å–∫–∞", podpiska))

    strategy_handler = ConversationHandler(
        entry_points=[CommandHandler("—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", strategiya)],
        states={
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, goal)],
            AUDIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, audience)],
            PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, period)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(strategy_handler)

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={
            THEME: [MessageHandler(filters.TEXT & ~filters.COMMAND, theme)],
            STYLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, style)],
            TEMPLATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, template)],
            IDEAS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ideas)],
            EDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(conv_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()