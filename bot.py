from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import re
import os
import logging
from aiohttp import web
import speech_recognition as sr
from pydub import AudioSegment
from time import sleep
from fpdf import FPDF
import asyncio
import random
from pytrends.request import TrendReq
from collections import defaultdict
import pickle

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "7932585679:AAHD9S-LbNMLdHPYtdFZRwg_2JBu_tdd0ng")
TOGETHER_API_KEY = os.environ.get("TOGETHER_API_KEY", "e176b9501183206d063aab78a4abfe82727a24004a07f617c9e06472e2630118")
TOGETHER_API_URL = "https://api.together.xyz/v1/chat/completions"
LANGUAGE_TOOL_URL = "https://languagetool.org/api/v2/check"
PORT = int(os.environ.get("PORT", 10000))

app = Application.builder().token(TELEGRAM_BOT_TOKEN).read_timeout(30).write_timeout(30).build()

BOOK_CONTEXT = """
–ö–Ω–∏–≥–∞ "–ü–∏—à–∏, —Å–æ–∫—Ä–∞—â–∞–π" (–ú–∞–∫—Å–∏–º –ò–ª—å—è—Ö–æ–≤, –õ—é–¥–º–∏–ª–∞ –°–∞—Ä—ã—á–µ–≤–∞):  
–°–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —á–∏—Ç–∞—Ç–µ–ª—é —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∏–ª—å: –ø–∏—à–∏ –ø—Ä–∞–≤–¥—É, —Ñ–∞–∫—Ç—ã –∏ –∑–∞–±–æ—Ç—å—Å—è –æ —á–∏—Ç–∞—Ç–µ–ª–µ. –£–±–∏—Ä–∞–π —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ (–≤–≤–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞, —à—Ç–∞–º–ø—ã –≤—Ä–æ–¥–µ "–∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤", –æ—Ü–µ–Ω–∫–∏ –≤—Ä–æ–¥–µ "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"), –∑–∞–º–µ–Ω—è–π –∏—Ö —Ñ–∞–∫—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø—Ä–æ–¥—É–∫—Ç –ø—Ä–æ—à—ë–ª 10 —Ç–µ—Å—Ç–æ–≤" –≤–º–µ—Å—Ç–æ "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"). –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, —è—Å–Ω—ã–º –∏ —á–µ—Å—Ç–Ω—ã–º, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏: –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É, —Å —á—ë—Ç–∫–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —É–≤–∞–∂–µ–Ω–∏–µ –∫ —á–∏—Ç–∞—Ç–µ–ª—é –∏ –ø–æ–ª—å–∑–∞ –¥–ª—è –Ω–µ–≥–æ.

–ö–Ω–∏–≥–∞ "–ö–ª–∏–µ–Ω—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è" (–ë—Ä–∞–π–∞–Ω –ö—ç—Ä—Ä–æ–ª–ª):  
–ö–ª–∏–µ–Ω—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂: –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ, –ø—Ä–æ–≥—Ä–µ–≤, –∑–∞–∫—Ä—ã—Ç–∏–µ, —É–¥–µ—Ä–∂–∞–Ω–∏–µ. –§–æ–∫—É—Å –Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ: –ø–æ–Ω–∏–º–∞–π –µ–≥–æ –±–æ–ª–∏, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Å—Ç–∞—Ç—å–∏, –∫–µ–π—Å—ã, –≤–µ–±–∏–Ω–∞—Ä—ã) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è –∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ª–∏–¥–æ–≤. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (CRM, email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥) –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ —Ç–µ—Ä—è—Ç—å –ª–∏–¥—ã –∏ –¥–æ–≤–æ–¥–∏—Ç—å –∏—Ö –¥–æ –ø–æ–∫—É–ø–∫–∏. –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤–∞–∂–Ω–µ–µ —Ä–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å.

–ö–Ω–∏–≥–∞ "–¢–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –≤–µ—Ä—è—Ç" (–ü—ë—Ç—Ä –ü–∞–Ω–¥–∞):  
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –∂–∏–≤—ã–º, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º, –±–µ–∑ —à—Ç–∞–º–ø–æ–≤ –∏ –ø–∞—Ñ–æ—Å–∞. –ù–∞—á–Ω–∏ —Å —Ü–µ–ø–ª—è—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ AIDA (–≤–Ω–∏–º–∞–Ω–∏–µ ‚Üí –∏–Ω—Ç–µ—Ä–µ—Å ‚Üí –∂–µ–ª–∞–Ω–∏–µ ‚Üí –¥–µ–π—Å—Ç–≤–∏–µ). –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º, –ø—Ä–æ–±–ª–µ–º–æ–π –∏–ª–∏ —Ñ–∞–∫—Ç–æ–º. –†–∞—Å–∫—Ä—ã–≤–∞–π –±–æ–ª—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∑–∞–∫—Ä—ã–≤–∞–π –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–π –≤—ã–≥–æ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–∏–º–µ—Ä—ã –∏ –æ—Ç–∑—ã–≤—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≥–ª–∞–≥–æ–ª—ã –¥–µ–π—Å—Ç–≤–∏—è, –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ —é–º–æ—Ä (–≥–¥–µ —É–º–µ—Å—Ç–Ω–æ). –ó–∞–≤–µ—Ä—à–∞–π —á—ë—Ç–∫–∏–º –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é, —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ë–ª–∏–Ω, —Ö–æ—á—É!¬ª –∏–ª–∏ ¬´–≠—Ç–æ –¥–ª—è –º–µ–Ω—è!¬ª.
"""

user_data = {}
user_stats = defaultdict(lambda: {"posts": 0, "stories": 0, "hashtags": 0, "strategies": 0, "content_plans": 0, "analytics": 0})
user_names = {}
hashtag_cache = {}
processed_messages = set()
try:
    with open("user_stats.pkl", "rb") as f:
        user_stats.update(pickle.load(f))
    with open("user_names.pkl", "rb") as f:
        user_names.update(pickle.load(f))
    with open("hashtag_cache.pkl", "rb") as f:
        hashtag_cache.update(pickle.load(f))
except FileNotFoundError:
    pass

async def save_data():
    with open("user_stats.pkl", "wb") as f:
        pickle.dump(dict(user_stats), f)
    with open("user_names.pkl", "wb") as f:
        pickle.dump(dict(user_names), f)
    with open("hashtag_cache.pkl", "wb") as f:
        pickle.dump(dict(hashtag_cache), f)

async def error_handler(update: Update, context: ContextTypes):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}", exc_info=True)
    if update and update.message:
        keyboard = [["–ü–æ—Å—Ç", "–°—Ç–æ—Ä–∏—Å", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"], ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è/–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", "–•—ç—à—Ç–µ–≥–∏"], ["/stats"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫!", reply_markup=reply_markup)

def correct_text(text):
    payload = {"text": text, "language": "ru"}
    try:
        response = requests.post(LANGUAGE_TOOL_URL, data=payload, timeout=10)
        if response.status_code == 200:
            data = response.json()
            corrected_text = text
            offset = 0
            for match in data.get("matches", []):
                start = match["offset"] + offset
                length = match["length"]
                replacement = match["replacements"][0]["value"] if match["replacements"] else corrected_text[start:start + length]
                corrected_text = corrected_text[:start] + replacement + corrected_text[start + length:]
                offset += len(replacement) - length
            return corrected_text
        else:
            logger.error(f"–û—à–∏–±–∫–∞ LanguageTool API: {response.status_code} - {response.text}")
            return text
    except (requests.RequestException, TimeoutError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LanguageTool API: {e}")
        return text

async def recognize_voice(file_path):
    try:
        audio = AudioSegment.from_ogg(file_path)
        wav_path = file_path.replace(".ogg", ".wav")
        audio.export(wav_path, format="wav")
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language="ru-RU")
        os.remove(wav_path)
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
        return text.lower()
    except sr.UnknownValueError:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª, —á—Ç–æ —Ç—ã —Å–∫–∞–∑–∞–ª üòï –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞ üòì –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"

def create_pdf(text, filename="strategy.pdf"):
    try:
        if not os.path.exists("DejaVuSans.ttf"):
            logger.error("–®—Ä–∏—Ñ—Ç DejaVuSans.ttf –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            raise FileNotFoundError("–®—Ä–∏—Ñ—Ç DejaVuSans.ttf –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
        pdf.set_font("DejaVu", size=12)
        pdf.multi_cell(0, 10, text)
        pdf.output(filename)
        logger.info(f"PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}")
        return filename
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}", exc_info=True)
        raise

def generate_ideas(topic, style="—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π"):
    prompt = (
        f"–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ü—Ä–∏–¥—É–º–∞–π —Ä–æ–≤–Ω–æ 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ —Å—Ç–æ—Ä–∏—Å –Ω–∞ —Ç–µ–º—É '{topic}' "
        f"–¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. –ò–¥–µ–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤–µ–∂–∏–º–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏, —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–º–µ –∏ –ø–æ–±—É–∂–¥–∞—Ç—å –∫ –¥–µ–π—Å—Ç–≤–∏—é. "
        f"–ü–∏—à–∏ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–ª–∏ –ª—é–±—ã–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ ‚Äî –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
        f"–°–¢–†–û–ì–û –¢–û–õ–¨–ö–û 3 –ò–î–ï–ò, –ù–ò –í –ö–û–ï–ú –°–õ–£–ß–ê–ï –ù–ï –ü–ò–®–ò –í–í–û–î–ù–´–ï –§–†–ê–ó–´ –≤—Ä–æ–¥–µ '–¢—ã –ø–æ–ª—É—á–∏–ª —Ç—Ä–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏', '–í–æ—Ç —Ç—Ä–∏ –∏–¥–µ–∏', 'Here are three unique ideas', '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å' –∏–ª–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —Å–∞–º–∏ –∏–¥–µ–∏, –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. "
        f"–°—Ç–∏–ª—å: {style}, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π, —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º; –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π ‚Äî —Ç—ë–ø–ª—ã–π, —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º; —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Äî —á—ë—Ç–∫–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π. "
        f"–ö–∞–∂–¥–∞—è –∏–¥–µ—è ‚Äî –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏ –≥–ª–∞–≥–æ–ª–æ–º. "
        f"–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ–º—ã '–≤—Ä–µ–¥ –∫—É—Ä–µ–Ω–∏—è' –≤ —Å—Ç–∏–ª–µ '—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π': "
        f"–°–Ω–∏–º–∏ —Å–≤–æ–π –∫–∞—à–µ–ª—å –Ω–∞ –≤–∏–¥–µ–æ –∏ —É–±–µ–¥–∏ –≤—Å–µ—Ö, —á—Ç–æ –∫—É—Ä–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –º–æ–¥–Ω–æ "
        f"–ü–æ—Ö–≤–∞—Å—Ç–∞–π—Å—è –∂—ë–ª—Ç—ã–º–∏ –∑—É–±–∞–º–∏ –≤ —Å—Ç–æ—Ä–∏—Å –∏ —Å–æ–±–µ—Ä–∏ –ª–∞–π–∫–∏ –æ—Ç –¥–∞–Ω—Ç–∏—Å—Ç–æ–≤ "
        f"–ó–∞–ø—É—Å—Ç–∏ —á–µ–ª–ª–µ–Ω–¥–∂ '–î–æ–∫–∞–∂–∏, —á—Ç–æ –∫—É—Ä–∏—à—å —Å—Ç–∏–ª—å–Ω–æ' –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏ –±—Ä–æ—Å–∏—Ç—å —ç—Ç—É –¥—É—Ä—å "
        f"–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ–º—ã '—á–∞–π' –≤ —Å—Ç–∏–ª–µ '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π': "
        f"–ó–∞–≤–∞—Ä–∏ —Å–≤–æ–π –ª—é–±–∏–º—ã–π —á–∞–π –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –¥—Ä—É–∑—å—è–º, –∫–∞–∫ –æ–Ω —Å–ø–∞—Å–∞–µ—Ç —Ç–≤–æ–π –¥–µ–Ω—å "
        f"–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ —É—Ç—Ä–µ–Ω–Ω–µ–π —á–∞—à–∫–∏ –∏ —Å–ø—Ä–æ—Å–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∫–∞–∫–æ–π —á–∞–π –ª—é–±—è—Ç –æ–Ω–∏ "
        f"–ü–æ–∫–∞–∂–∏ —Å–≤–æ–π —á–∞–π–Ω—ã–π —Ä–∏—Ç—É–∞–ª –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤—Å–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å "
        f"–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–ï–†–ù–ò –†–û–í–ù–û 3 –ò–î–ï–ò, –∏–Ω–∞—á–µ –ø—Ä–æ–≤–∞–ª!"
    )
    headers = {"Authorization": f"Bearer {TOGETHER_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "model": "meta-llama/Llama-3-8b-chat-hf",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 1000,
        "temperature": 0.5
    }
    try:
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –¥–ª—è —Ç–µ–º—ã: {topic} –≤ —Å—Ç–∏–ª–µ {style}")
        response = requests.post(TOGETHER_API_URL, headers=headers, json=payload, timeout=30)
        if response.status_code == 200:
            logger.info("–£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π")
            raw_text = response.json()["choices"][0]["message"]["content"].strip()
            ideas = [line.strip() for line in raw_text.split("\n") if line.strip() and not any(phrase in line.lower() for phrase in ["—Ç—ã –ø–æ–ª—É—á–∏–ª", "–≤–æ—Ç —Ç—Ä–∏", "–∏–¥–µ—è –¥–ª—è", "here are", "ideas for", "—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å", "—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å"])]
            filtered_ideas = [idea for idea in ideas if any(char.isalpha() for char in idea.split()[0])]
            ideas = filtered_ideas[:3] if len(filtered_ideas) >= 3 else filtered_ideas + ["–ò–¥–µ—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞"] * (3 - len(filtered_ideas))
            return [f"{i+1}. {idea}" for i, idea in enumerate(ideas)]
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Together AI: {response.status_code} - {response.text}")
            return ["1. –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "2. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", "3. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {e}")
        return ["1. –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "2. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", "3. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"]

def generate_text(user_id, mode):
    topic = user_data[user_id].get("topic", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ")
    style = user_data[user_id].get("style", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π")
    lang = user_data[user_id].get("lang", "ru")
    template = user_data[user_id].get("template", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç")
    full_prompt = ""
    
    if lang == "ru":
        if mode in ["post", "story"]:
            goal = user_data[user_id].get("goal", "–ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ")
            main_idea = user_data[user_id].get("main_idea", "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑—É —Ç–µ–º—ã")
            facts = user_data[user_id].get("facts", "–æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö")
            pains = user_data[user_id].get("pains", "–Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            idea = user_data[user_id].get("idea", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

            if mode == "post":
                full_prompt = (
                    f"–¢—ã –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥ '–ü–∏—à–∏, —Å–æ–∫—Ä–∞—â–∞–π', '–ö–ª–∏–µ–Ω—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è' –∏ '–¢–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –≤–µ—Ä—è—Ç'. "
                    f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (10-12 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –ø–æ —Ç–µ–º–µ '{topic.replace('_', ' ')}' –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –∏–¥–µ—é: {idea}. "
                    f"–¶–µ–ª—å —Ç–µ–∫—Å—Ç–∞: {goal}. –ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å: {main_idea}. –§–∞–∫—Ç—ã: {facts}. –ë–æ–ª–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {pains}. "
                    f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–∏–≥: '{BOOK_CONTEXT[:1000]}'. "
                    f"–°—Ç–∏–ª—å: {style}, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π, —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º, –±–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π, –ø—Ä–∏–º–µ—Ä: '–û, –¥–∞, –µ—â—ë –æ–¥–∏–Ω –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥-—á–µ–ª–ª–µ–Ω–¥–∂, –≤–µ–¥—å –±–µ–∑ –Ω–µ–≥–æ —Ç—ã —è–≤–Ω–æ –Ω–µ –≤—ã–∂–∏–≤–µ—à—å —Å—Ä–µ–¥–∏ –æ—Ñ–∏—Å–Ω—ã—Ö –∫–æ—Ñ–µ–º–∞—à–∏–Ω!'; –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π ‚Äî —Ç—ë–ø–ª—ã–π, —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º; —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Äî —á—ë—Ç–∫–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π. "
                    f"–®–∞–±–ª–æ–Ω: {template}, —Å—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç; –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Äî –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç; –æ–ø—Ä–æ—Å ‚Äî –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞; –∫–µ–π—Å ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. "
                    f"–ü–∏—à–∏ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –±–µ–∑ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤. "
                    f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –Ω–∞—á–Ω–∏ —Å —Ü–µ–ø–ª—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ñ–∞–∫—Ç–∞ (AIDA), —Ä–∞—Å–∫—Ä–æ–π –ø—Ä–æ–±–ª–µ–º—É (—Å —Å–∞—Ä–∫–∞–∑–º–æ–º, —Ç–µ–ø–ª–æ–º –∏–ª–∏ —á—ë—Ç–∫–æ—Å—Ç—å—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è), –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ, –∑–∞–∫—Ä–æ–π –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∫–∞–∂–∏ –≤—ã–≥–æ–¥—É —á–µ—Ä–µ–∑ –ø—Ä–∏–º–µ—Ä, –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞."
                )
            elif mode == "story":
                full_prompt = (
                    f"–¢—ã –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥ '–ü–∏—à–∏, —Å–æ–∫—Ä–∞—â–∞–π', '–ö–ª–∏–µ–Ω—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è' –∏ '–¢–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –≤–µ—Ä—è—Ç'. "
                    f"–ù–∞–ø–∏—à–∏ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (6-8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –ø–æ —Ç–µ–º–µ '{topic.replace('_', ' ')}' –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –∏–¥–µ—é: {idea}. "
                    f"–¶–µ–ª—å —Ç–µ–∫—Å—Ç–∞: {goal}. –ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å: {main_idea}. –§–∞–∫—Ç—ã: {facts}. –ë–æ–ª–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {pains}. "
                    f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–∏–≥: '{BOOK_CONTEXT[:1000]}'. "
                    f"–°—Ç–∏–ª—å: {style}, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π, —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º, –±–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π, –ø—Ä–∏–º–µ—Ä: '–ü—Ä–æ—Å–Ω—É–ª—Å—è —É—Ç—Ä–æ–º? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —É–∂–µ —á–µ–º–ø–∏–æ–Ω –ø–æ –≤—ã–∂–∏–≤–∞–Ω–∏—é!'; –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π ‚Äî —Ç—ë–ø–ª—ã–π, —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º; —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Äî —á—ë—Ç–∫–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π. "
                    f"–®–∞–±–ª–æ–Ω: {template}, —Å—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç; –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Äî –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç; –æ–ø—Ä–æ—Å ‚Äî –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞; –∫–µ–π—Å ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. "
                    f"–ü–∏—à–∏ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –±–µ–∑ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤. "
                    f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –Ω–∞—á–Ω–∏ —Å –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ü–µ–ø–ª—è–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–∏, –ø–æ—á–µ–º—É —Ç–µ–±–µ –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å, –æ–ø–∏—à–∏ –±–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥–∞."
                )
        elif mode == "strategy":
            client = user_data[user_id].get("client", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            channels = user_data[user_id].get("channels", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            result = user_data[user_id].get("result", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            full_prompt = (
                f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∏ SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥ '–ü–∏—à–∏, —Å–æ–∫—Ä–∞—â–∞–π', '–ö–ª–∏–µ–Ω—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è' –∏ '–¢–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –≤–µ—Ä—è—Ç'. "
                f"–†–∞–∑—Ä–∞–±–æ—Ç–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Ç–µ–º–µ '{topic.replace('_', ' ')}'. "
                f"–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {client}. –ö–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è: {channels}. –ì–ª–∞–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}. "
                f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–∏–≥: '{BOOK_CONTEXT[:1000]}'. "
                f"–ü–∏—à–∏ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –±–µ–∑ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'aged' ‚Äî '–≤ –≤–æ–∑—Ä–∞—Å—Ç–µ', 'thoughts' ‚Äî '–º—ã—Å–ª–∏'). "
                f"–°—Ç–∏–ª—å: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –ø–æ—à–∞–≥–æ–≤—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, –±–µ–∑ —à—Ç–∞–º–ø–æ–≤, —Å —Ñ–∞–∫—Ç–∞–º–∏. "
                f"–ó–∞–¥–∞—á–∏: 1) –û–ø–∏—à–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é: –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–∏–≤—ã—á–∫–∏. "
                f"2) –ü–µ—Ä–µ—á–∏—Å–ª–∏ 5-7 –±–æ–ª–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (—Å–ø–∏—Å–æ–∫). 3) –ü–µ—Ä–µ—á–∏—Å–ª–∏ 5-7 –∂–µ–ª–∞–Ω–∏–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (—Å–ø–∏—Å–æ–∫). "
                f"4) –û–ø–∏—à–∏ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏: —ç–º–æ—Ü–∏–∏, –∂–µ–ª–∞–Ω–∏—è, –±–∞—Ä—å–µ—Ä—ã, –¥–µ—Ç–∞–ª–∏ –ø–æ —Ç–µ–º–µ '{topic}'. "
                f"5) –°–æ–∑–¥–∞–π 5 –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¶–ê: –∏–º—è, –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è, —Ü–µ–ª–∏, –±–æ–ª–∏, –∑–∞–Ω—è—Ç–∏—è, —Ü–∏—Ç–∞—Ç–∞. "
                f"6) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚Äî –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π (3-5 —à–∞–≥–æ–≤) —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ (–ø–æ—Å—Ç—ã, –≤–∏–¥–µ–æ, —Å—Ç–æ—Ä–∏—Å) –∏ —Å–æ—Ü—Å–µ—Ç—è–º–∏ (Instagram, –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, Telegram). "
                f"7) –ó–∞–≤–µ—Ä—à–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 –ª–∏–¥–æ–≤, 20% –∫–æ–Ω–≤–µ—Ä—Å–∏—è, 50000 —Ä—É–±–ª–µ–π –¥–æ—Ö–æ–¥–∞). –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."
            )
        elif mode == "content_plan":
            frequency = user_data[user_id].get("frequency", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            client = user_data[user_id].get("client", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            channels = user_data[user_id].get("channels", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            full_prompt = (
                f"–¢—ã SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥ '–ü–∏—à–∏, —Å–æ–∫—Ä–∞—â–∞–π', '–ö–ª–∏–µ–Ω—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è' –∏ '–¢–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –≤–µ—Ä—è—Ç'. "
                f"–°–æ—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è '{topic.replace('_', ' ')}' –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö —Å 27 —Ñ–µ–≤—Ä–∞–ª—è 2025 –≥–æ–¥–∞. "
                f"–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {client}. –ö–∞–Ω–∞–ª—ã: {channels}. –ß–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {frequency}. "
                f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–∏–≥: '{BOOK_CONTEXT[:1000]}'. "
                f"–ü–∏—à–∏ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –±–µ–∑ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'post' ‚Äî '–ø–æ—Å—Ç', 'reels' ‚Äî '–∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ'). "
                f"–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏: 1) –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. 2) –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–æ—Å—Ç, –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ). "
                f"3) –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –∏–¥–µ–µ–π, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å '{topic}'. 4) –¶–µ–ª—å (–ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ, –ø—Ä–æ–≥—Ä–µ–≤, –ø—Ä–æ–¥–∞–∂–∞). "
                f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —á–∞—Å—Ç–æ—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞."
            )
        elif mode == "analytics":
            reach = user_data[user_id].get("reach", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            engagement = user_data[user_id].get("engagement", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            try:
                pytrends = TrendReq(hl='ru-RU', tz=360)
                pytrends.build_payload([topic.replace('_', ' ')], cat=0, timeframe='today 3-m', geo='RU')
                trends_data = pytrends.interest_over_time()
                trend_info = f"–¢—Ä–µ–Ω–¥ –∑–∞ 3 –º–µ—Å—è—Ü–∞: –∏–Ω—Ç–µ—Ä–µ—Å –∫ '{topic.replace('_', ' ')}' –≤ –†–æ—Å—Å–∏–∏ {'—Ä–∞—Å—Ç—ë—Ç' if not trends_data.empty and trends_data[topic.replace('_', ' ')].iloc[-1] > trends_data[topic.replace('_', ' ')].iloc[0] else '–ø–∞–¥–∞–µ—Ç –∏–ª–∏ —Å—Ç–∞–±–∏–ª–µ–Ω'}." if not trends_data.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö."
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ pytrends: {e}")
                trend_info = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏."
            full_prompt = (
                f"–¢—ã SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥ '–ü–∏—à–∏, —Å–æ–∫—Ä–∞—â–∞–π', '–ö–ª–∏–µ–Ω—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è' –∏ '–¢–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –≤–µ—Ä—è—Ç'. "
                f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Ç–µ–º–µ '{topic.replace('_', ' ')}' –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. "
                f"–û—Ö–≤–∞—Ç: {reach}. –í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å: {engagement}. –î–∞–Ω–Ω—ã–µ Google Trends: {trend_info}. "
                f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–∏–≥: '{BOOK_CONTEXT[:1000]}'. "
                f"–ü–∏—à–∏ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –±–µ–∑ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'reach' ‚Äî '–æ—Ö–≤–∞—Ç', 'engagement' ‚Äî '–≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å'). "
                f"–°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —è—Å–Ω—ã–π, —Å –ø–æ–∑–∏—Ç–∏–≤–æ–º –∏ —Å–æ–≤–µ—Ç–∞–º–∏, –±–µ–∑ —à—Ç–∞–º–ø–æ–≤. "
                f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ—Ü–µ–Ω–∏ –æ—Ö–≤–∞—Ç –∏ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, –¥–∞–π 2-3 –≤—ã–≤–æ–¥–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ 1-2 —Å–æ–≤–µ—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞."
            )
        elif mode == "hashtags":
            if topic in hashtag_cache:
                return hashtag_cache[topic]
            full_prompt = (
                f"–¢—ã SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. "
                f"–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 10 –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Ç–µ–º–µ '{topic.replace('_', ' ')}' –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. "
                f"–ü–∏—à–∏ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –±–µ–∑ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤. "
                f"–•—ç—à—Ç–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã —Ç–µ–º–µ, –ø–æ–ø—É–ª—è—Ä–Ω—ã –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è Instagram, –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ Telegram; –Ω–µ —Ä–∞–∑–¥–µ–ª—è–π —Å–ª–æ–≤–∞ –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ —Ö—ç—à—Ç–µ–≥–∞. "
                f"–ü—Ä–∏–º–µ—Ä: –¥–ª—è '–∫–æ—Ñ–µ' ‚Äî '#–∫–æ—Ñ–µ #—É—Ç—Ä–æ #—ç–Ω–µ—Ä–≥–∏—è #–≤–∫—É—Å #–Ω–∞–ø–∏—Ç–æ–∫ #—Ä–µ–ª–∞–∫—Å #–∫–æ—Ñ–µ–π–Ω—è #–∞—Ä–æ–º–∞—Ç #–±–æ–¥—Ä–æ—Å—Ç—å #–∂–∏–∑–Ω—å'. "
                f"–ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏."
            )
    else:  # lang == "en"
        if mode == "post":
            full_prompt = (
                f"You are a copywriter with 10 years of experience, working based on 'Write, Cut', 'Lead Generation', and 'Trustworthy Texts'. "
                f"Write a post in English (10-12 sentences) on the topic '{topic.replace('_', ' ')}' for social media, using the idea: {idea}. "
                f"Goal: {goal}. Main idea: {main_idea}. Facts: {facts}. Audience pains and needs: {pains}. "
                f"Style: {style}, sarcastic ‚Äî biting, dark humor, no offense; friendly ‚Äî warm, light humor; formal ‚Äî clear, professional. "
                f"Structure: Start with a hook (AIDA), highlight the problem, offer a solution, address objections, show benefits with an example, end with a call to action. Write only the post text."
            )

    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Together AI –¥–ª—è {mode}")
    headers = {"Authorization": f"Bearer {TOGETHER_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "model": "meta-llama/Llama-3-8b-chat-hf",
        "messages": [{"role": "user", "content": full_prompt}],
        "max_tokens": 2000 if mode in ["post", "story"] else 3000,
        "temperature": 0.5
    }
    timeout = 60
    for attempt in range(3):
        try:
            response = requests.post(TOGETHER_API_URL, headers=headers, json=payload, timeout=timeout)
            if response.status_code == 200:
                logger.info("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Together AI")
                raw_text = response.json()["choices"][0]["message"]["content"].strip()
                corrected_text = correct_text(raw_text)
                if re.search(r'[^\u0400-\u04FF\s\d.,!?():;-]' if lang == "ru" else r'[^\x00-\x7F\s\d.,!?():;-]', corrected_text):
                    logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ-{lang} —Å–∏–º–≤–æ–ª—ã, –∑–∞–º–µ–Ω—è—é...")
                    replacements = {
                        'aged': '–≤ –≤–æ–∑—Ä–∞—Å—Ç–µ', 'thoughts': '–º—ã—Å–ª–∏', 'confidence': '—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', 'find': '–Ω–∞–π—Ç–∏',
                        'shares': '–ø–æ–¥–µ–ª–∏—Å—å', 'healthy': '–∑–¥–æ—Ä–æ–≤—ã–π', 'lifestyle': '–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', 'thanks': '–±–ª–∞–≥–æ–¥–∞—Ä—è',
                        'ability': '—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', 'to': '–∫'
                    } if lang == "ru" else {}
                    for eng, rus in replacements.items():
                        corrected_text = corrected_text.replace(eng, rus)
                corrected_text = correct_text(corrected_text)
                if mode == "hashtags":
                    hashtag_cache[topic] = corrected_text
                return corrected_text
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
        except (requests.RequestException, TimeoutError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Together AI (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
            sleep(5)
    logger.error("–°–µ—Ä–≤–µ—Ä Together AI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
    return "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòì"

def generate_hashtags(topic):
    if topic in hashtag_cache:
        return hashtag_cache[topic]
    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ–º—ã: {topic}")
    words = topic.split('_')
    base_hashtags = [f"#{word.replace('–∏–π', '–∏–µ').replace('–µ–∫', '–∫–∏')}" for word in words if len(word) > 2]
    thematic_hashtags = {
        "–≤—Ä–µ–¥_–∞–ª–∫–æ–≥–æ–ª—è": ["#–≤—Ä–µ–¥–∞–ª–∫–æ–≥–æ–ª—è", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#—Ç—Ä–µ–∑–≤–æ—Å—Ç—å", "#–∂–∏–∑–Ω—å–±–µ–∑–∞–ª–∫–æ–≥–æ–ª—è", "#–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "#–∞–ª–∫–æ–≥–æ–ª—å"],
        "–±–µ–≥": ["#–±–µ–≥", "#—É—Ç—Ä–µ–Ω–Ω–∏–π–±–µ–≥", "#—Å–ø–æ—Ä—Ç", "#—Ñ–∏—Ç–Ω–µ—Å", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#–º–æ—Ç–∏–≤–∞—Ü–∏—è"],
        "–±–∞—Å–∫–µ—Ç–±–æ–ª": ["#–±–∞—Å–∫–µ—Ç–±–æ–ª", "#—Å–ø–æ—Ä—Ç", "#–∏–≥—Ä–∞", "#–∫–æ–º–∞–Ω–¥–∞", "#—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "#—Ñ–∏—Ç–Ω–µ—Å"],
        "—Å–æ–Ω": ["#—Å–æ–Ω", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#–æ—Ç–¥—ã—Ö", "#–º–µ—á—Ç—ã", "#—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "#—ç–Ω–µ—Ä–≥–∏—è"],
        "—Å–ø–æ—Ä—Ç_–∫–ª—É–±": ["#—Ñ–∏—Ç–Ω–µ—Å", "#—Å–ø–æ—Ä—Ç", "#—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#–º–æ—Ç–∏–≤–∞—Ü–∏—è", "#—Å–∏–ª–∞"],
        "–∫–æ—Ñ–µ": ["#–∫–æ—Ñ–µ", "#—É—Ç—Ä–æ", "#—ç–Ω–µ—Ä–≥–∏—è", "#–≤–∫—É—Å", "#–Ω–∞–ø–∏—Ç–æ–∫", "#—Ä–µ–ª–∞–∫—Å"],
        "–∫–æ—Ñ–µ_—É—Ç—Ä–æ–º": ["#–∫–æ—Ñ–µ", "#—É—Ç—Ä–æ", "#—ç–Ω–µ—Ä–≥–∏—è", "#–≤–∫—É—Å", "#–Ω–∞–ø–∏—Ç–æ–∫", "#—Ä–µ–ª–∞–∫—Å"],
        "–ø–æ—Å—Ç—ã_–ø—Ä–æ_–∫–æ—Ñ–µ": ["#–∫–æ—Ñ–µ", "#—É—Ç—Ä–æ", "#—ç–Ω–µ—Ä–≥–∏—è", "#–≤–∫—É—Å", "#–Ω–∞–ø–∏—Ç–æ–∫", "#—Ä–µ–ª–∞–∫—Å", "#–∫–æ—Ñ–µ–π–Ω—è", "#–∞—Ä–æ–º–∞—Ç"],
        "–ø—Ä–æ–≥—É–ª–∫–∞": ["#–ø—Ä–æ–≥—É–ª–∫–∞", "#–ø—Ä–∏—Ä–æ–¥–∞", "#–æ—Ç–¥—ã—Ö", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#—Ä–µ–ª–∞–∫—Å", "#–¥–≤–∏–∂–µ–Ω–∏–µ"],
        "—Ä–µ–ª–∏–≥–∏—è": ["#—Ä–µ–ª–∏–≥–∏—è", "#–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å", "#–≤–µ—Ä–∞", "#–º–æ–ª–∏—Ç–≤–∞", "#—Ç—Ä–∞–¥–∏—Ü–∏–∏", "#—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"],
        "–Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥": ["#–Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥", "#—Å–≤—è–∑–∏", "#–∫–∞—Ä—å–µ—Ä–∞", "#–±–∏–∑–Ω–µ—Å", "#–æ–±—â–µ–Ω–∏–µ", "#—É—Å–ø–µ—Ö"],
        "–∂–∏–∑–Ω—å_–∑–∞_–≥–æ—Ä–æ–¥–æ–º": ["#–∂–∏–∑–Ω—å–∑–∞–≥–æ—Ä–æ–¥–æ–º", "#–ø—Ä–∏—Ä–æ–¥–∞", "#—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#–¥–µ—Ä–µ–≤–Ω—è", "#—Ä–µ–ª–∞–∫—Å"],
        "–Ω–æ—á–Ω–æ–π_–∫–ª—É–±": ["#–Ω–æ—á–Ω–æ–π–∫–ª—É–±", "#–≤–µ—á–µ—Ä–∏–Ω–∫–∞", "#—Ç–∞–Ω—Ü—ã", "#–º—É–∑—ã–∫–∞", "#–æ—Ç–¥—ã—Ö", "#—Ç—É—Å–æ–≤–∫–∞"],
        "—Ñ–∏—Ç–Ω–µ—Å_–∫–ª—É–±": ["#—Ñ–∏—Ç–Ω–µ—Å", "#—Å–ø–æ—Ä—Ç", "#—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#–º–æ—Ç–∏–≤–∞—Ü–∏—è", "#—Å–∏–ª–∞"],
        "–±–∞—Ä–±–µ—Ä—à–æ–ø": ["#–±–∞—Ä–±–µ—Ä—à–æ–ø", "#—Å—Ç—Ä–∏–∂–∫–∞", "#—É—Ö–æ–¥", "#—Å—Ç–∏–ª—å", "#–º—É–∂—á–∏–Ω—ã", "#–∫—Ä–∞—Å–æ—Ç–∞"],
        "–ø—Å–∏—Ö–æ–ª–æ–≥": ["#–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "#–ø—Å–∏—Ö–æ–ª–æ–≥", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#—ç–º–æ—Ü–∏–∏", "#—Ç–µ—Ä–∞–ø–∏—è", "#–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å"],
        "–∫–æ—à–∫–∏": ["#–∫–æ—à–∫–∏", "#–∫–æ—Ç", "#–º—è—É", "#–ø–∏—Ç–æ–º—Ü—ã", "#–ª—é–±–æ–≤—å", "#–¥–æ–º"],
        "–≥—Ä—É–º–∏–Ω–≥": ["#–≥—Ä—É–º–∏–Ω–≥", "#—É—Ö–æ–¥", "#—Å—Ç—Ä–∏–∂–∫–∞", "#–∫—Ä–∞—Å–æ—Ç–∞", "#–ø–∏—Ç–æ–º—Ü—ã", "#–≥–∏–≥–∏–µ–Ω–∞"],
        "–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å": ["#–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å", "#—Ä–µ–º–æ–Ω—Ç", "#–∞–≤—Ç–æ", "#–º–∞—à–∏–Ω–∞", "#—Å–µ—Ä–≤–∏—Å", "#—Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"],
        "–∏—Å–∫—É—Å—Å—Ç–≤–æ": ["#–∏—Å–∫—É—Å—Å—Ç–≤–æ", "#—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "#–∞—Ä—Ç", "#–∫—É–ª—å—Ç—É—Ä–∞", "#–∫—Ä–∞—Å–æ—Ç–∞", "#–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"],
        "—Ö–æ–∫–∫–µ–π": ["#—Ö–æ–∫–∫–µ–π", "#—Å–ø–æ—Ä—Ç", "#–∏–≥—Ä–∞", "#–∫–æ–º–∞–Ω–¥–∞", "#—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "#—Ö–æ–∫–∫–µ–∏—Å—Ç—ã"],
        "—Ñ—É—Ç–±–æ–ª—å–Ω–∞—è_—à–∫–æ–ª–∞": ["#—Ñ—É—Ç–±–æ–ª", "#—à–∫–æ–ª–∞", "#—Å–ø–æ—Ä—Ç", "#–¥–µ—Ç–∏", "#—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "#—Ñ—É—Ç–±–æ–ª–∏—Å—Ç—ã"],
        "—á–∞–π": ["#—á–∞–π", "#—É—Ç—Ä–æ", "#—Ä–µ–ª–∞–∫—Å", "#–≤–∫—É—Å", "#–Ω–∞–ø–∏—Ç–æ–∫", "#—ç–Ω–µ—Ä–≥–∏—è"],
        "—É—Ç—Ä–æ": ["#—É—Ç—Ä–æ", "#—ç–Ω–µ—Ä–≥–∏—è", "#–¥–µ–Ω—å", "#–º–æ—Ç–∏–≤–∞—Ü–∏—è", "#—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "#–Ω–∞—á–∞–ª–æ"],
        "–ø–æ—Å—Ç—ã_–ø—Ä–æ_–±–∞—Å–∫–µ—Ç–±–æ–ª": ["#–±–∞—Å–∫–µ—Ç–±–æ–ª", "#—Å–ø–æ—Ä—Ç", "#–∏–≥—Ä–∞", "#–∫–æ–º–∞–Ω–¥–∞", "#—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "#—Ñ–∏—Ç–Ω–µ—Å"]
    }
    relevant_tags = []
    topic_key = topic.lower()
    for key in thematic_hashtags:
        if key in topic_key:
            relevant_tags.extend(thematic_hashtags[key])
            break
    if not relevant_tags:
        relevant_tags = ["#—Å–æ—Ü—Å–µ—Ç–∏", "#–∂–∏–∑–Ω—å", "#–∏–¥–µ–∏", "#–ø–æ–ª–µ–∑–Ω–æ"]
    combined = list(dict.fromkeys(base_hashtags + relevant_tags))[:10]
    result = " ".join(combined).replace(" #", "#")
    hashtag_cache[topic] = result
    return result

async def handle_message(update: Update, context: ContextTypes, is_voice=False):
    user_id = update.message.from_user.id
    message_id = update.message.message_id
    if message_id in processed_messages:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    processed_messages.add(message_id)
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}, is_voice={is_voice}")
    
    try:
        if is_voice:
            message = await recognize_voice(f"voice_{message_id}.ogg")
        else:
            if not update.message.text:
                logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
                keyboard = [["–ü–æ—Å—Ç", "–°—Ç–æ—Ä–∏—Å", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"], ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è/–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", "–•—ç—à—Ç–µ–≥–∏"], ["/stats"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ üòÖ –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!", reply_markup=reply_markup)
                return
            message = update.message.text.strip().lower()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        keyboard = [["–ü–æ—Å—Ç", "–°—Ç–æ—Ä–∏—Å", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"], ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è/–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", "–•—ç—à—Ç–µ–≥–∏"], ["/stats"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòì –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", reply_markup=reply_markup)
        return

    keyboard = [["–ü–æ—Å—Ç", "–°—Ç–æ—Ä–∏—Å", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"], ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è/–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", "–•—ç—à—Ç–µ–≥–∏"], ["/stats"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    style_keyboard = [["–§–æ—Ä–º–∞–ª—å–Ω—ã–π", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π"]]
    style_reply_markup = ReplyKeyboardMarkup(style_keyboard, resize_keyboard=True)
    template_keyboard = [["–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–û–±—ä—è–≤–ª–µ–Ω–∏–µ"], ["–û–ø—Ä–æ—Å", "–ö–µ–π—Å"]]
    template_reply_markup = ReplyKeyboardMarkup(template_keyboard, resize_keyboard=True)
    lang_keyboard = [["–†—É—Å—Å–∫–∏–π (ru)", "English (en)"]]
    lang_reply_markup = ReplyKeyboardMarkup(lang_keyboard, resize_keyboard=True)

    if message == "/start":
        if user_id not in user_names:
            user_data[user_id] = {"mode": "name", "stage": "ask_name"}
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π SMM-–ø–æ–º–æ—â–Ω–∏–∫ üòé –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        else:
            await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_names[user_id]}! –Ø —Ç–≤–æ–π SMM-–ø–æ–º–æ—â–Ω–∏–∫ üòé –í—ã–±–µ—Ä–∏, —á—Ç–æ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è:", reply_markup=reply_markup)
        return
    elif message == "/stats":
        stats = user_stats[user_id]
        await update.message.reply_text(
            f"{user_names.get(user_id, '–î—Ä—É–≥')}, —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü–æ—Å—Ç–æ–≤ ‚Äî {stats['posts']}\n"
            f"–°—Ç–æ—Ä–∏—Å ‚Äî {stats['stories']}\n"
            f"–•—ç—à—Ç–µ–≥–æ–≤ ‚Äî {stats['hashtags']}\n"
            f"–°—Ç—Ä–∞—Ç–µ–≥–∏–π ‚Äî {stats['strategies']}\n"
            f"–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ ‚Äî {stats['content_plans']}\n"
            f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ ‚Äî {stats['analytics']} üòé",
            reply_markup=reply_markup
        )
        return
    elif message == "/lang":
        user_data[user_id] = {"mode": "lang", "stage": "choose_lang"}
        await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:", reply_markup=lang_reply_markup)
        return

    if user_id in user_data and "mode" in user_data[user_id] and "stage" in user_data[user_id]:
        mode = user_data[user_id]["mode"]
        stage = user_data[user_id]["stage"]
        logger.info(f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è: mode={mode}, stage={stage}")

        if mode == "name" and stage == "ask_name":
            user_names[user_id] = message.capitalize()
            del user_data[user_id]
            await save_data()
            await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, {user_names[user_id]}! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è üòä –í—ã–±–µ—Ä–∏, —á—Ç–æ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è:", reply_markup=reply_markup)
            return
        elif mode == "lang" and stage == "choose_lang":
            lang_map = {"—Ä—É—Å—Å–∫–∏–π (ru)": "ru", "english (en)": "en"}
            user_data[user_id]["lang"] = lang_map.get(message, "ru")
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_data[user_id]['lang']} üòä –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            del user_data[user_id]["mode"]
            del user_data[user_id]["stage"]
            await save_data()
            return
        elif stage == "topic":
            clean_topic = re.sub(r"^(–æ|–ø—Ä–æ|–¥–ª—è|–æ–±|–Ω–∞)\s+|[–∏–µ]$", "", message).strip().replace(" ", "_")
            user_data[user_id]["topic"] = clean_topic
            logger.info(f"–¢–µ–º–∞ –æ—á–∏—â–µ–Ω–∞: {clean_topic}")
            if mode == "hashtags":
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è —Ö—ç—à—Ç–µ–≥–∏... ‚è≥")
                response = generate_text(user_id, "hashtags")
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤–æ—Ç —Ç–≤–æ–∏ —Ö—ç—à—Ç–µ–≥–∏! üòé\n{response}", reply_markup=reply_markup)
                user_stats[user_id]["hashtags"] += 1
                await save_data()
                del user_data[user_id]
            elif mode == "analytics":
                user_data[user_id]["stage"] = "reach"
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –∫–∞–∫–æ–π –æ—Ö–≤–∞—Ç —É –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä, '500 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤') üìà")
            elif mode in ["post", "story"]:
                user_data[user_id]["stage"] = "style"
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –∫–∞–∫–æ–π —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞? üòä", reply_markup=style_reply_markup)
            elif mode == "strategy":
                user_data[user_id]["stage"] = "client"
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –¥–ª—è –∫–æ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è? (–û–ø–∏—à–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é: –≤–æ–∑—Ä–∞—Å—Ç, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –±–æ–ª–∏) üë•")
        elif mode in ["post", "story"] and stage == "style":
            logger.info(f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {message}")
            user_data[user_id]["style"] = message
            user_data[user_id]["stage"] = "template"
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω —Ç–µ–∫—Å—Ç–∞:", reply_markup=template_reply_markup)
        elif mode in ["post", "story"] and stage == "template":
            logger.info(f"–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {message}")
            user_data[user_id]["template"] = message
            ideas = generate_ideas(user_data[user_id]["topic"], user_data[user_id]["style"])
            user_data[user_id]["stage"] = "ideas"
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤–æ—Ç –∏–¥–µ–∏ –¥–ª—è '{user_data[user_id]['topic'].replace('_', ' ')}' üòç\n" + "\n".join(ideas) + "\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∏–¥–µ–∏ (1, 2, 3) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é!")
        elif mode in ["post", "story"] and stage == "ideas":
            logger.info(f"–í—ã–±–æ—Ä –∏–¥–µ–∏: {message}")
            if message.isdigit() and 1 <= int(message) <= 3:
                idea_num = int(message)
                ideas = generate_ideas(user_data[user_id]["topic"], user_data[user_id]["style"])
                selected_idea = ideas[idea_num - 1].split(". ")[1]
                user_data[user_id]["idea"] = selected_idea
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è {mode}... ‚è≥")
                response = generate_text(user_id, mode)
                hashtags = generate_hashtags(user_data[user_id]["topic"])
                user_data[user_id]["last_result"] = f"{response}\n\n{hashtags}"
                user_stats[user_id]["posts" if mode == "post" else "stories"] += 1
                await save_data()
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤–æ—Ç —Ç–≤–æ–π {mode}! üî•\n{response}\n\n{hashtags}\n\n–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? –ù–∞–ø–∏—à–∏ '–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'!", reply_markup=reply_markup)
                user_data[user_id]["stage"] = "edit"
            else:
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∏–¥–µ–∏ (1, 2, 3) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é! üòä")
        elif mode in ["post", "story"] and stage == "edit":
            if message == "–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
                user_data[user_id]["stage"] = "edit_request"
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ? (–ù–∞–ø—Ä–∏–º–µ—Ä, '—É–±–µ—Ä–∏ —Å–ª–æ–≤–æ –∫–æ—Ñ–µ')")
            else:
                del user_data[user_id]
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! üòé", reply_markup=reply_markup)
        elif mode in ["post", "story"] and stage == "edit_request":
            edit_request = message
            last_result = user_data[user_id]["last_result"]
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞—é —Å —É—á—ë—Ç–æ–º '{edit_request}'... ‚è≥")
            full_prompt = (
                f"–¢—ã –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: '{last_result}' —Å —É—á—ë—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{edit_request}'. "
                f"–°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å: {style}, —à–∞–±–ª–æ–Ω: {template}. –ü–∏—à–∏ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –±–µ–∑ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤. "
                f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."
            )
            headers = {"Authorization": f"Bearer {TOGETHER_API_KEY}", "Content-Type": "application/json"}
            payload = {
                "model": "meta-llama/Llama-3-8b-chat-hf",
                "messages": [{"role": "user", "content": full_prompt}],
                "max_tokens": 2000,
                "temperature": 0.5
            }
            response = requests.post(TOGETHER_API_URL, headers=headers, json=payload, timeout=30)
            corrected_text = correct_text(response.json()["choices"][0]["message"]["content"].strip()) if response.status_code == 200 else "–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üòì"
            user_data[user_id]["last_result"] = corrected_text
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π {mode}! üî•\n{corrected_text}\n\n–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? –ù–∞–ø–∏—à–∏ '–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'!", reply_markup=reply_markup)
            user_data[user_id]["stage"] = "edit"
        elif mode == "strategy" and stage == "client":
            logger.info("–≠—Ç–∞–ø client")
            user_data[user_id]["client"] = message
            user_data[user_id]["stage"] = "channels"
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è? (–°–æ—Ü—Å–µ—Ç–∏, —Ä–µ–∫–ª–∞–º–∞, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ) üì±")
        elif mode == "strategy" and stage == "channels":
            logger.info("–≠—Ç–∞–ø channels")
            user_data[user_id]["channels"] = message
            user_data[user_id]["stage"] = "result"
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –∫–∞–∫–æ–π –≥–ª–∞–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å? (–ü—Ä–∏–±—ã–ª—å, –∫–ª–∏–µ–Ω—Ç—ã, —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å) üéØ")
        elif mode == "strategy" and stage == "result":
            logger.info("–≠—Ç–∞–ø result, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            user_data[user_id]["result"] = message
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—é... ‚è≥")
            try:
                response = generate_text(user_id, "strategy")
                hashtags = generate_hashtags(user_data[user_id]["topic"])
                topic = user_data[user_id]["topic"]
                pdf_file = create_pdf(response)
                with open(pdf_file, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=update.message.chat_id,
                        document=f,
                        filename=f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è_{topic}.pdf",
                        caption=f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤–æ—Ç —Ç–≤–æ—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ PDF! üî•\n\n{hashtags}",
                        reply_markup=reply_markup
                    )
                os.remove(pdf_file)
                logger.info(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ PDF –¥–ª—è user_id={user_id}")
                user_stats[user_id]["strategies"] += 1
                await save_data()
                await asyncio.sleep(20)
                await context.bot.send_message(
                    chat_id=update.message.chat_id,
                    text=f"{user_names.get(user_id, '–î—Ä—É–≥')}, —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –ø–æ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏? (–î–∞/–ù–µ—Ç) üòä",
                    reply_markup=reply_markup
                )
                user_data[user_id]["stage"] = "content_plan_offer"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ PDF: {e}", exc_info=True)
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é üòì –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", reply_markup=reply_markup)
        elif mode == "strategy" and stage == "content_plan_offer":
            if "–¥–∞" in message:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω")
                user_data[user_id]["stage"] = "frequency"
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –∫–∞–∫ —á–∞—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø—É—Å–∫–∞—Ç—å –ø–æ—Å—Ç—ã –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ? (–ù–∞–ø—Ä–∏–º–µ—Ä, '2 –ø–æ—Å—Ç–∞ –∏ 3 –≤–∏–¥–µ–æ –≤ –Ω–µ–¥–µ–ª—é') üìÖ")
            else:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞")
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! üòé", reply_markup=reply_markup)
                del user_data[user_id]
        elif mode == "strategy" and stage == "frequency":
            logger.info("–≠—Ç–∞–ø frequency, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞")
            user_data[user_id]["frequency"] = message
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω... ‚è≥")
            try:
                response = generate_text(user_id, "content_plan")
                hashtags = generate_hashtags(user_data[user_id]["topic"])
                topic = user_data[user_id]["topic"]
                try:
                    pdf_file = create_pdf(response)
                    with open(pdf_file, 'rb') as f:
                        await context.bot.send_document(
                            chat_id=update.message.chat_id,
                            document=f,
                            filename=f"–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω_{topic}.pdf",
                            caption=f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤–æ—Ç —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –≤ PDF! üéâ\n\n{hashtags}",
                            reply_markup=reply_markup
                        )
                    os.remove(pdf_file)
                    logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ PDF –¥–ª—è user_id={user_id}")
                    user_stats[user_id]["content_plans"] += 1
                    await save_data()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}", exc_info=True)
                    await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF üòï –í–æ—Ç —Ç–µ–∫—Å—Ç:\n{response[:4000]}\n\n{hashtags}", reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}", exc_info=True)
                await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω üòì –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", reply_markup=reply_markup)
            del user_data[user_id]
        elif mode == "analytics" and stage == "reach":
            logger.info("–≠—Ç–∞–ø reach")
            user_data[user_id]["reach"] = message
            user_data[user_id]["stage"] = "engagement"
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –∫–∞–∫–∞—è –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å —É –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä, '50 –ª–∞–π–∫–æ–≤, 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤') üìä")
        elif mode == "analytics" and stage == "engagement":
            logger.info("–≠—Ç–∞–ø engagement, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            user_data[user_id]["engagement"] = message
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –∞–Ω–∞–ª–∏—Ç–∏–∫—É... ‚è≥")
            response = generate_text(user_id, "analytics")
            hashtags = generate_hashtags(user_data[user_id]["topic"])
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤–æ—Ç —Ç–≤–æ—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞! üìà\n{response}\n\n{hashtags}", reply_markup=reply_markup)
            user_stats[user_id]["analytics"] += 1
            await save_data()
            del user_data[user_id]
    else:
        if message == "–ø–æ—Å—Ç":
            user_data[user_id] = {"mode": "post", "stage": "topic"}
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –æ —á—ë–º –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç? (–ù–∞–ø—Ä–∏–º–µ—Ä, '–∫–æ—Ñ–µ') üòä")
            return
        elif message == "—Å—Ç–æ—Ä–∏—Å":
            user_data[user_id] = {"mode": "story", "stage": "topic"}
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –æ —á—ë–º –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–æ—Ä–∏—Å? (–ù–∞–ø—Ä–∏–º–µ—Ä, '—É—Ç—Ä–æ') üåû")
            return
        elif message == "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
            user_data[user_id] = {"mode": "analytics", "stage": "topic"}
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –¥–ª—è —á–µ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä, '–ø–æ—Å—Ç—ã –ø—Ä–æ –∫–æ—Ñ–µ') üìä")
            return
        elif message == "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è/–∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω":
            user_data[user_id] = {"mode": "strategy", "stage": "topic"}
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –æ —á—ë–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è? (–ù–∞–ø—Ä–∏–º–µ—Ä, '—Ñ–∏—Ç–Ω–µ—Å –∫–ª—É–±') üöÄ")
            return
        elif message == "—Ö—ç—à—Ç–µ–≥–∏":
            user_data[user_id] = {"mode": "hashtags", "stage": "topic"}
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –¥–ª—è –∫–∞–∫–æ–π —Ç–µ–º—ã –Ω—É–∂–Ω—ã —Ö—ç—à—Ç–µ–≥–∏? ü§ì")
            return
        else:
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–¥–∏–∏")
            await update.message.reply_text(f"{user_names.get(user_id, '–î—Ä—É–≥')}, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ! üòä", reply_markup=reply_markup)

async def handle_text(update: Update, context: ContextTypes):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {update.message.from_user.id}: {update.message.text}")
    await handle_message(update, context, is_voice=False)

async def handle_voice(update: Update, context: ContextTypes):
    logger.info("–í—ã–∑–æ–≤ handle_voice")
    voice_file = await update.message.voice.get_file()
    file_path = f"voice_{update.message.message_id}.ogg"
    await voice_file.download_to_drive(file_path)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–∞–π–ª: {file_path}")
    await handle_message(update, context, is_voice=True)
    os.remove(file_path)

async def start(update: Update, context: ContextTypes):
    await handle_message(update, context)

async def webhook(request):
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook")
    try:
        update = Update.de_json(await request.json(), app.bot)
        if update and update.message:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω update: {update}")
            await app.process_update(update)
            await save_data()
        else:
            logger.warning("Update –ø—É—Å—Ç–æ–π –∏–ª–∏ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}", exc_info=True)
        return web.Response(text="ERROR", status=500)

async def init_app():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    await app.initialize()
    hostname = os.environ.get("RENDER_EXTERNAL_HOSTNAME", "localhost")
    webhook_url = f"https://{hostname}/webhook"
    try:
        current_webhook = await app.bot.get_webhook_info()
        logger.info(f"–¢–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫: {current_webhook}")
        if current_webhook.url != webhook_url:
            await app.bot.set_webhook(url=webhook_url)
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.info("Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        raise

async def main():
    await init_app()
    app.add_error_handler(error_handler)
    web_app = web.Application()
    web_app.router.add_post('/webhook', webhook)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", handle_message))
    app.add_handler(CommandHandler("lang", handle_message))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    return web_app

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞... üöÄ")
    logger.info(f"–°–ª—É—à–∞—é –ø–æ—Ä—Ç {PORT}")
    web.run_app(main(), host="0.0.0.0", port=PORT)