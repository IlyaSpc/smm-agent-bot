import os
import logging
from typing import Dict, List, Optional, Any
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import aiohttp
import re
import asyncio
from aiohttp import web
import json

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")
    TOGETHER_API_URL = "https://api.together.xyz/v1/chat/completions"
    PROMPTS_URL = "https://drive.usercontent.google.com/download?id=1byy2KMAGV3Thg0MwH94PMQEjoA3BwqWK&export=download"
    PORT = int(os.getenv("PORT", 10000))

    @classmethod
    def validate(cls):
        required = {"TELEGRAM_BOT_TOKEN": cls.TELEGRAM_BOT_TOKEN, "TOGETHER_API_KEY": cls.TOGETHER_API_KEY}
        missing = [k for k, v in required.items() if not v]
        if missing:
            raise ValueError(f"Missing environment variables: {', '.join(missing)}")

Config.validate()
app = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).read_timeout(30).write_timeout(30).build()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BASE_KEYBOARD = ReplyKeyboardMarkup([
    ["–ü–æ—Å—Ç", "–°—Ç–æ—Ä–∏—Å", "Reels"],
    ["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", "–ê/–ë —Ç–µ—Å—Ç"],
    ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è/–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", "–•—ç—à—Ç–µ–≥–∏"]
], resize_keyboard=True)

STYLE_KEYBOARD = ReplyKeyboardMarkup([["–§–æ—Ä–º–∞–ª—å–Ω—ã–π", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π"]], resize_keyboard=True)
TONE_KEYBOARD = ReplyKeyboardMarkup([["–ú–∏–ª–ª–µ–Ω–∏–∞–ª—ã", "–ë–∏–∑–Ω–µ—Å-–∞—É–¥–∏—Ç–æ—Ä–∏—è", "Gen Z"]], resize_keyboard=True)
TEMPLATE_KEYBOARD = ReplyKeyboardMarkup([["–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–û–±—ä—è–≤–ª–µ–Ω–∏–µ"], ["–û–ø—Ä–æ—Å", "–ö–µ–π—Å"]], resize_keyboard=True)

# –ö—ç—à –ø—Ä–æ–º—Ç–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
PROMPTS: Dict[str, str] = {}
PROCESSED_UPDATES: set = set()

async def load_prompts() -> None:
    async with aiohttp.ClientSession() as session:
        async with ÿ¨ŸÑÿ≥Ÿá.get(Config.PROMPTS_URL) as response:
            if response.status == 200:
                raw_data = await response.read()
                logger.info(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Google Drive: {raw_data[:100]}...")
                try:
                    PROMPTS.update(json.loads(raw_data.decode('utf-8')))
                    logger.info("–ü—Ä–æ–º—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                except json.JSONDecodeError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å prompts.json –∏–∑ Google Drive")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º—Ç–æ–≤: {response.status} - {await response.text()}")
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å prompts.json: {response.status}")

async def get_prompt(prompt_name: str) -> str:
    return PROMPTS.get(prompt_name, f"–û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç '{prompt_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def call_together_api(prompt: str, max_tokens: int = 500) -> str:
    headers = {"Authorization": f"Bearer {Config.TOGETHER_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "model": "meta-llama/Llama-3-8b-chat-hf",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": max_tokens,
        "temperature": 0.5
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(Config.TOGETHER_API_URL, headers=headers, json=payload, timeout=aiohttp.ClientTimeout(total=30)) as response:
                if response.status == 200:
                    data = await response.json()
                    raw_text = data["choices"][0]["message"]["content"].strip()
                    logger.info(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API: {raw_text[:100]}...")
                    return raw_text
                logger.error(f"–û—à–∏–±–∫–∞ API Together: {response.status} - {await response.text()}")
                return "–û—à–∏–±–∫–∞ API"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Together API: {e}")
        return "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòì"

async def generate_content(user_id: int, mode: str, topic: str, style: str = "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π") -> str:
    user_data = app.bot_data.setdefault(user_id, {})
    niche = user_data.get("niche", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ")
    prompt_template = await get_prompt(mode)
    if "–æ—à–∏–±–∫–∞" in prompt_template.lower():
        return prompt_template

    try:
        # –ù–∏—à–∞ –∫–∞–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–ª–µ–Ω–∏—è, –∞ –Ω–µ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        context = f"–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –Ω–∏—à–µ '{niche}' ‚Äî —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–¥–∞—ë—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, —á–∞—Ç-–±–æ—Ç—ã, –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂). –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ç–µ–º–µ '{topic}' –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –Ω–∏—à—É –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤."
        if mode in {"post", "strategy", "competitor_analysis", "ab_testing", "hashtags"}:
            full_prompt = context + "\n" + prompt_template.format(
                topic=topic.replace('_', ' '),
                style=style,
                tone=user_data.get("tone", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"),
                template=user_data.get("template", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç"),
                client=user_data.get("client", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ"),
                channels=user_data.get("channels", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ"),
                result=user_data.get("result", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ"),
                competitor_keyword=user_data.get("competitor_keyword", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ")
            )
            return await call_together_api(full_prompt, 2000 if mode == "strategy" else 500)
        elif mode in {"ideas", "reels", "stories"}:
            full_prompt = context + "\n" + prompt_template.format(topic=topic.replace('_', ' '), style=style)
            raw_text = await call_together_api(full_prompt)
            ideas = [line.strip() for line in raw_text.split("\n") if line.strip() and not line.startswith("#")]
            ideas = [re.sub(r'^\d+\.\s*|\*\*.*\*\*\s*', '', idea) for idea in ideas if len(idea.split()) > 5][:3]
            if not ideas:
                ideas = ["–ò—Å–∫—Ä—ã –≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"]
            return "\n".join(f"{i+1}. {idea}" for i, idea in enumerate(ideas))
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞: {e}")
        return f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {e}"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATES: Dict[str, Dict[str, Any]] = {
    "start": {"text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", "next": "name"},
    "name": {"text": "–í –∫–∞–∫–æ–π –Ω–∏—à–µ —Ä–∞–±–æ—Ç–∞–µ—à—å?", "next": "niche"},
    "niche": {"text": "–ß—Ç–æ –¥–µ–ª–∞–µ–º?", "next": "main", "keyboard": BASE_KEYBOARD},
    "main": {"text": "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ!", "keyboard": BASE_KEYBOARD},
    "post_topic": {"text": "–û —á—ë–º –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç?", "next": "post_style"},
    "post_style": {"text": "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞?", "next": "post_tone", "keyboard": STYLE_KEYBOARD},
    "post_tone": {"text": "–í—ã–±–µ—Ä–∏ —Ç–æ–Ω –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏:", "next": "post_template", "keyboard": TONE_KEYBOARD},
    "post_template": {"text": "–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω:", "next": "post_ideas", "keyboard": TEMPLATE_KEYBOARD},
    "post_ideas": {"text": lambda uid: f"–í–æ—Ç –∏–¥–µ–∏:\n{app.bot_data[uid]['ideas']}\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä (1, 2, 3)!", "next": "post_generate"},
    "post_generate": {"text": lambda uid: f"–í–æ—Ç —Ç–≤–æ–π –ø–æ—Å—Ç:\n{app.bot_data[uid]['post']}", "next": "main", "keyboard": BASE_KEYBOARD},
    "stories_topic": {"text": "–û —á—ë–º —Å–Ω—è—Ç—å —Å—Ç–æ—Ä–∏—Å?", "next": "stories_generate"},
    "stories_generate": {"text": lambda uid: f"–í–æ—Ç –∏–¥–µ–∏ –¥–ª—è —Å—Ç–æ—Ä–∏—Å:\n{app.bot_data[uid]['ideas']}", "next": "main", "keyboard": BASE_KEYBOARD},
    "reels_topic": {"text": "–û —á—ë–º —Å–Ω—è—Ç—å Reels?", "next": "reels_generate"},
    "reels_generate": {"text": lambda uid: f"–í–æ—Ç –∏–¥–µ–∏ –¥–ª—è Reels:\n{app.bot_data[uid]['ideas']}", "next": "main", "keyboard": BASE_KEYBOARD},
    "competitors_keyword": {"text": "–£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤!", "next": "competitors_generate"},
    "competitors_generate": {"text": lambda uid: f"–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:\n{app.bot_data[uid]['analysis']}", "next": "main", "keyboard": BASE_KEYBOARD},
    "ab_test_topic": {"text": "–î–ª—è —á–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏?", "next": "ab_test_generate"},
    "ab_test_generate": {"text": lambda uid: f"–í–æ—Ç 3 –∑–∞–≥–æ–ª–æ–≤–∫–∞:\n{app.bot_data[uid]['headlines']}\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä (1, 2, 3)!", "next": "main", "keyboard": BASE_KEYBOARD},
    "strategy_topic": {"text": "–ü–æ –∫–∞–∫–æ–π —Ç–µ–º–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è?", "next": "strategy_client"},
    "strategy_client": {"text": "–ö—Ç–æ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?", "next": "strategy_channels"},
    "strategy_channels": {"text": "–ö–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è?", "next": "strategy_result"},
    "strategy_result": {"text": "–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω?", "next": "strategy_generate"},
    "strategy_generate": {"text": lambda uid: f"–í–æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:\n{app.bot_data[uid]['strategy']}", "next": "main", "keyboard": BASE_KEYBOARD},
    "hashtags_topic": {"text": "–ü–æ –∫–∞–∫–æ–π —Ç–µ–º–µ —Ö—ç—à—Ç–µ–≥–∏?", "next": "hashtags_generate"},
    "hashtags_generate": {"text": lambda uid: f"–í–æ—Ç —Ö—ç—à—Ç–µ–≥–∏:\n{app.bot_data[uid]['hashtags']}", "next": "main", "keyboard": BASE_KEYBOARD},
    "analytics": {"text": "–§—É–Ω–∫—Ü–∏—è '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç!", "next": "main", "keyboard": BASE_KEYBOARD},
}

async def handle_message(update: Update, context: ContextTypes) -> None:
    user_id = update.message.from_user.id
    message = update.message.text.lower().strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message}")

    user_data = app.bot_data.setdefault(user_id, {"state": "start"})
    state = user_data["state"]

    if message == "/start":
        user_data.clear()
        user_data["state"] = "start"
        state_info = STATES["start"]
        await update.message.reply_text(state_info["text"])
        user_data["state"] = state_info["next"]
        return

    state_info = STATES.get(state, {"text": "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ!", "keyboard": BASE_KEYBOARD})

    if state in {"name", "niche"}:
        user_data[state] = message.capitalize() if state == "name" else message
    elif state.startswith("post_"):
        if state == "post_ideas" and message.isdigit() and 1 <= int(message) <= 3:
            user_data["post"] = await generate_content(user_id, "post", user_data["topic"], user_data["style"])
        elif state == "post_generate":
            pass
        else:
            user_data[state.split("_")[1]] = message.lower() if state == "post_tone" else message
            if state == "post_template":
                user_data["ideas"] = await generate_content(user_id, "ideas", user_data["topic"], user_data["style"])
    elif state in {"stories_topic", "reels_topic"}:
        user_data["topic"] = message.replace(" ", "_")
        user_data["ideas"] = await generate_content(user_id, "stories" if state == "stories_topic" else "reels", user_data["topic"])
    elif state == "competitors_keyword":
        user_data["competitor_keyword"] = message
        user_data["analysis"] = await generate_content(user_id, "competitor_analysis", message)
    elif state == "ab_test_topic":
        user_data["topic"] = message.replace(" ", "_")
        user_data["headlines"] = await generate_content(user_id, "ab_testing", user_data["topic"])
    elif state.startswith("strategy_"):
        user_data[state.split("_")[1]] = message
        if state == "strategy_result":
            user_data["strategy"] = await generate_content(user_id, "strategy", user_data["topic"])
    elif state == "hashtags_topic":
        user_data["topic"] = message.replace(" ", "_")
        user_data["hashtags"] = await generate_content(user_id, "hashtags", user_data["topic"])
    elif state == "main":
        next_state = {
            "–ø–æ—Å—Ç": "post_topic",
            "—Å—Ç–æ—Ä–∏—Å": "stories_topic",
            "reels": "reels_topic",
            "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞": "analytics",
            "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã": "competitors_keyword",
            "–∞/–± —Ç–µ—Å—Ç": "ab_test_topic",
            "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è/–∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω": "strategy_topic",
            "—Ö—ç—à—Ç–µ–≥–∏": "hashtags_topic"
        }.get(message)
        if next_state:
            user_data["state"] = next_state
            state_info = STATES[next_state]
            await update.message.reply_text(state_info["text"], reply_markup=state_info.get("keyboard"))
            return

    next_state = state_info.get("next", "main")
    user_data["state"] = next_state
    next_info = STATES.get(next_state, {"text": "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ!", "keyboard": BASE_KEYBOARD})
    
    if callable(next_info["text"]):
        text = next_info["text"](user_id)
    else:
        text = next_info["text"]
        if next_state == "niche":
            text = f"–û—Ç–ª–∏—á–Ω–æ, {user_data.get('name', '–¥—Ä—É–≥')}! –í –∫–∞–∫–æ–π –Ω–∏—à–µ —Ä–∞–±–æ—Ç–∞–µ—à—å?"
        elif next_state == "main":
            text = f"–ö—Ä—É—Ç–æ, –Ω–∏—à–∞ '{user_data.get('niche', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}'! –ß—Ç–æ –¥–µ–ª–∞–µ–º?"

    await update.message.reply_text(text, reply_markup=next_info.get("keyboard"))

# Webhook
async def webhook(request: web.Request) -> web.Response:
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
        data = await request.json()
        update_id = data.get("update_id")
        if update_id in PROCESSED_UPDATES:
            logger.warning(f"–î—É–±–ª–∏–∫–∞—Ç update_id: {update_id}")
            return web.Response(text="Duplicate", status=200)
        PROCESSED_UPDATES.add(update_id)
        update = Update.de_json(data, app.bot)
        if update:
            await app.process_update(update)
            return web.Response(text="OK", status=200)
        return web.Response(text="No update", status=400)
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        return web.Response(text="Invalid JSON", status=400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}", exc_info=True)
        return web.Response(text="Error", status=500)

async def health_check(request: web.Request) -> web.Response:
    return web.Response(text="OK", status=200)

async def main() -> None:
    await app.initialize()
    await app.start()
    await load_prompts()

    web_app = web.Application()
    web_app.router.add_post('/webhook', webhook)
    web_app.router.add_get('/health', health_check)

    app.add_handler(CommandHandler("start", handle_message))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', Config.PORT)
    await site.start()
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {Config.PORT}")

    try:
        await asyncio.Event().wait()
    finally:
        await app.stop()
        await runner.cleanup()

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(main())