import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import re
import asyncio
from aiohttp import web
import json

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "7932585679:AAHD9S-LbNMLdHPYtdFZRwg_2JBu_tdd0ng")
TOGETHER_API_KEY = os.environ.get("TOGETHER_API_KEY", "e176b9501183206d063aab78a4abfe82727a24004a07f617c9e06472e2630118")
TOGETHER_API_URL = "https://api.together.xyz/v1/chat/completions"
PROMPTS_URL = "https://drive.google.com/uc?export=download&id=1byy2KMAGV3Thg0MwH94PMQEjoA3BwqWK"
PORT = int(os.environ.get("PORT", 10000))

app = Application.builder().token(TELEGRAM_BOT_TOKEN).read_timeout(30).write_timeout(30).build()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
user_data = {}
user_names = {}
hashtag_cache = {}

# Health check endpoint
async def health_check(request):
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /health")
    return web.Response(text="OK", status=200)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º—Ç–æ–≤ —Å Google Drive
async def get_prompt_from_drive(prompt_name):
    try:
        response = requests.get(PROMPTS_URL, timeout=10)
        if response.status_code == 200:
            prompts = json.loads(response.text)
            return prompts.get(prompt_name, "–ü—Ä–æ–º—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º—Ç–æ–≤: {response.status_code} - {response.text}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º—Ç–æ–≤"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Drive: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º—Ç–æ–≤"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
async def generate_text(user_id, mode):
    topic = user_data[user_id].get("topic", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ")
    style = user_data[user_id].get("style", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π")
    tone = user_data[user_id].get("tone", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π")
    template = user_data[user_id].get("template", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç")
    niche = user_data[user_id].get("niche", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ")
    client = user_data[user_id].get("client", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ")
    channels = user_data[user_id].get("channels", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ")
    result = user_data[user_id].get("result", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ")
    competitor_keyword = user_data[user_id].get("competitor_keyword", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ")

    base_prompt = await get_prompt_from_drive(mode)
    if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in base_prompt or "–æ—à–∏–±–∫–∞" in base_prompt.lower():
        return f"–û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –¥–ª—è '{mode}' –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!"

    try:
        full_prompt = base_prompt.format(
            topic=topic.replace('_', ' '),
            style=style,
            tone=tone,
            template=template,
            niche=niche,
            client=client,
            channels=channels,
            result=result,
            competitor_keyword=competitor_keyword
        )
    except KeyError as e:
        return f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–º—Ç–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {e}"

    headers = {"Authorization": f"Bearer {TOGETHER_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "model": "meta-llama/Llama-3-8b-chat-hf",
        "messages": [{"role": "user", "content": full_prompt}],
        "max_tokens": 2000,
        "temperature": 0.5
    }
    try:
        response = requests.post(TOGETHER_API_URL, headers=headers, json=payload, timeout=30)
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"].strip()
        return "–û—à–∏–±–∫–∞ API"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòì"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π
def generate_ideas(topic, style="—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π", user_id=None):
    niche = user_data.get(user_id, {}).get("niche", "–Ω–µ_—É–∫–∞–∑–∞–Ω–æ")
    mode = user_data[user_id].get("mode", "post")
    prompt_key = "reels" if mode == "reels" else "ideas"
    base_prompt = asyncio.run(get_prompt_from_drive(prompt_key))
    if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in base_prompt or "–æ—à–∏–±–∫–∞" in base_prompt.lower():
        return ["1. –û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –¥–ª—è –∏–¥–µ–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!"]

    try:
        full_prompt = base_prompt.format(topic=topic, style=style, niche=niche)
    except KeyError as e:
        return [f"1. –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–º—Ç–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {e}"]

    headers = {"Authorization": f"Bearer {TOGETHER_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "model": "meta-llama/Llama-3-8b-chat-hf",
        "messages": [{"role": "user", "content": full_prompt}],
        "max_tokens": 1000,
        "temperature": 0.7
    }
    try:
        response = requests.post(TOGETHER_API_URL, headers=headers, json=payload, timeout=30)
        if response.status_code == 200:
            raw_text = response.json()["choices"][0]["message"]["content"].strip()
            ideas = [line.strip() for line in raw_text.split("\n") if line.strip()]
            return [f"{i+1}. {idea}" for i, idea in enumerate(ideas[:3])]
        return ["1. –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π üòì"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {e}")
        return ["1. –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòì"]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes, is_voice=False):
    user_id = update.message.from_user.id
    message = update.message.text.lower().strip() if not is_voice else "–≥–æ–ª–æ—Å–æ–≤–æ–µ"

    if user_id not in user_data:
        user_data[user_id] = {"preferences": {"topics": [], "styles": []}}

    base_keyboard = [["–ü–æ—Å—Ç", "–°—Ç–æ—Ä–∏—Å", "Reels"], ["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", "–ê/–ë —Ç–µ—Å—Ç"], ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è/–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", "–•—ç—à—Ç–µ–≥–∏"], ["/stats"]]
    reply_markup = ReplyKeyboardMarkup(base_keyboard, resize_keyboard=True)

    if message == "/start":
        user_data[user_id]["mode"] = "name"
        user_data[user_id]["stage"] = "ask_name"
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return

    mode = user_data[user_id].get("mode")
    stage = user_data[user_id].get("stage")

    if mode == "name" and stage == "ask_name":
        user_names[user_id] = message.capitalize()
        user_data[user_id]["mode"] = "niche"
        user_data[user_id]["stage"] = "ask_niche"
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, {user_names[user_id]}! –í –∫–∞–∫–æ–π –Ω–∏—à–µ —Ä–∞–±–æ—Ç–∞–µ—à—å?")
    elif mode == "niche" and stage == "ask_niche":
        user_data[user_id]["niche"] = message
        user_data[user_id]["mode"] = "main"
        await update.message.reply_text(f"–ö—Ä—É—Ç–æ, –Ω–∏—à–∞ '{message}'! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=reply_markup)
    elif mode == "post" and stage == "topic":
        user_data[user_id]["topic"] = message.replace(" ", "_")
        user_data[user_id]["stage"] = "style"
        await update.message.reply_text(f"–ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞?", reply_markup=ReplyKeyboardMarkup([["–§–æ—Ä–º–∞–ª—å–Ω—ã–π", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π"]], resize_keyboard=True))
    elif mode == "post" and stage == "style":
        user_data[user_id]["style"] = message
        user_data[user_id]["stage"] = "tone"
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏ —Ç–æ–Ω –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏:", reply_markup=ReplyKeyboardMarkup([["–ú–∏–ª–ª–µ–Ω–∏–∞–ª—ã", "–ë–∏–∑–Ω–µ—Å-–∞—É–¥–∏—Ç–æ—Ä–∏—è", "Gen Z"]], resize_keyboard=True))
    elif mode == "post" and stage == "tone":
        user_data[user_id]["tone"] = message.lower()
        user_data[user_id]["stage"] = "template"
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω:", reply_markup=ReplyKeyboardMarkup([["–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–û–±—ä—è–≤–ª–µ–Ω–∏–µ"], ["–û–ø—Ä–æ—Å", "–ö–µ–π—Å"]], resize_keyboard=True))
    elif mode == "post" and stage == "template":
        user_data[user_id]["template"] = message
        ideas = generate_ideas(user_data[user_id]["topic"], user_data[user_id]["style"], user_id)
        user_data[user_id]["stage"] = "ideas"
        await update.message.reply_text(f"–í–æ—Ç –∏–¥–µ–∏:\n" + "\n".join(ideas) + "\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä (1, 2, 3)!")
    elif mode == "post" and stage == "ideas":
        if message.isdigit() and 1 <= int(message) <= 3:
            user_data[user_id]["stage"] = "generating"
            response = await generate_text(user_id, "post")
            await update.message.reply_text(f"–í–æ—Ç —Ç–≤–æ–π –ø–æ—Å—Ç:\n{response}", reply_markup=reply_markup)
    elif message == "reels":
        user_data[user_id]["mode"] = "reels"
        user_data[user_id]["stage"] = "topic"
        await update.message.reply_text(f"–û —á—ë–º —Å–Ω—è—Ç—å Reels?")
    elif mode == "reels" and stage == "topic":
        user_data[user_id]["topic"] = message.replace(" ", "_")
        ideas = generate_ideas(user_data[user_id]["topic"], "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π", user_id)
        await update.message.reply_text(f"–í–æ—Ç –∏–¥–µ–∏ –¥–ª—è Reels:\n" + "\n".join(ideas), reply_markup=reply_markup)
    elif message == "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã":
        user_data[user_id]["mode"] = "competitor_analysis"
        user_data[user_id]["stage"] = "keyword"
        await update.message.reply_text(f"–£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤!")
    elif mode == "competitor_analysis" and stage == "keyword":
        user_data[user_id]["competitor_keyword"] = message
        response = await generate_text(user_id, "competitor_analysis")
        await update.message.reply_text(f"–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:\n{response}", reply_markup=reply_markup)
    elif message == "–∞/–± —Ç–µ—Å—Ç":
        user_data[user_id]["mode"] = "ab_testing"
        user_data[user_id]["stage"] = "topic"
        await update.message.reply_text(f"–î–ª—è —á–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏?")
    elif mode == "ab_testing" and stage == "topic":
        user_data[user_id]["topic"] = message.replace(" ", "_")
        response = await generate_text(user_id, "ab_testing")
        await update.message.reply_text(f"–í–æ—Ç 3 –∑–∞–≥–æ–ª–æ–≤–∫–∞:\n{response}\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä (1, 2, 3)!", reply_markup=reply_markup)
    else:
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ!", reply_markup=reply_markup)

# Webhook
async def webhook(request):
    try:
        update = Update.de_json(await request.json(), app.bot)
        await app.process_update(update)
        return web.Response(text="OK", status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return web.Response(text="Error", status=500)

# –ó–∞–ø—É—Å–∫
async def main():
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app.add_handler(CommandHandler("start", handle_message))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        web_app = web.Application()
        web_app.router.add_post('/webhook', webhook)
        web_app.router.add_get('/health', health_check)  # Health check endpoint
        logger.info(f"–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤, —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {PORT}")
        return web_app
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        web.run_app(main(), host="0.0.0.0", port=PORT)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")